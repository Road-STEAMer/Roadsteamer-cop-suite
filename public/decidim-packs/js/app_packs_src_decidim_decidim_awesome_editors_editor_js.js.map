{"version":3,"file":"js/app_packs_src_decidim_decidim_awesome_editors_editor_js.js","mappingsgJA;AAAA;AAhJA;AAAA;AAAA;AAAA;AAAA;AA6GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAxHA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAgBA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","sources":["webpack://decidim-app/./app/packs/src/decidim/decidim_awesome/editors/editor.js"],"sourcesContent":["/* eslint-disable require-jsdoc, func-style */\n\nimport lineBreakButtonHandler from \"src/decidim/editor/linebreak_module\";\nimport InscrybMDE from \"inscrybmde\";\nimport Europa from \"europa\";\nimport \"inline-attachment/src/inline-attachment\";\nimport \"inline-attachment/src/codemirror-4.inline-attachment\";\nimport \"inline-attachment/src/jquery.inline-attachment\";\nimport hljs from \"highlight.js\";\nimport \"highlight.js/styles/github.css\";\nimport \"src/decidim/editor/clipboard_override\";\nimport \"src/decidim/vendor/image-resize.min\";\nimport \"src/decidim/vendor/image-upload.min\";\nimport { marked } from \"marked\";\n\nconst DecidimAwesome = window.DecidimAwesome || {};\nconst quillFormats = [\"bold\", \"italic\", \"link\", \"underline\", \"header\", \"list\", \"video\", \"image\", \"alt\", \"break\", \"width\", \"style\", \"code\", \"blockquote\", \"indent\"];\n\n// A tricky way to destroy the quill editor\nexport function destroyQuillEditor(container) {\n  if (container) {\n    const content = $(container).find(\".ql-editor\").html();\n    $(container).html(content);\n    $(container).siblings(\".ql-toolbar\").remove();\n    $(container).find(\"*[class*='ql-']\").removeClass((index, className) => (className.match(/(^|\\s)ql-\\S+/g) || []).join(\" \"));\n    $(container).removeClass((index, className) => (className.match(/(^|\\s)ql-\\S+/g) || []).join(\" \"));\n    if ($(container).next().is(\"p.help-text\")) {\n      $(container).next().remove();\n    }\n  } else {\n    console.error(`editor [${container}] not exists`);\n  }\n}\n\nexport function createQuillEditor(container) {\n  const toolbar = $(container).data(\"toolbar\");\n  const disabled = $(container).data(\"disabled\");\n\n  const allowedEmptyContentSelector = \"iframe\";\n  let quillToolbar = [\n    [\"bold\", \"italic\", \"underline\", \"linebreak\"],\n    [{ list: \"ordered\" }, { list: \"bullet\" }],\n    [\"link\", \"clean\"],\n    [\"code\", \"blockquote\"],\n    [{ \"indent\": \"-1\" }, { \"indent\": \"+1\" }],\n    [{ 'savedDataset': \"openModal\" }]\n  ];\n\n  if (toolbar === \"full\") {\n    quillToolbar = [\n      [{ header: [2, 3, 4, 5, 6, false] }],\n      ...quillToolbar,\n      [\"video\"]\n    ];\n  } else if (toolbar === \"basic\") {\n    quillToolbar = [\n      ...quillToolbar,\n      [\"video\"]\n    ];\n  }\n\n  let modalData = [];\n  let hasFetched = false; // Flag to check if data has been fetched\n\n  // Function to fetch data\n  function fetchData() {\n    return new Promise((resolve, reject) => {\n      if (!hasFetched) { // Check if fetch hasn't been performed yet\n        fetch('/idra_modal_editor', {\n          method: 'GET'\n        })\n          .then(response => {\n            if (response.ok) {\n              return response.text(); // Assuming the response is HTML\n            } else {\n              throw new Error('Failed to fetch the updated content');\n            }\n          })\n          .then(data => {\n            const parser = new DOMParser();\n            const doc = parser.parseFromString(data, 'text/html');\n            const datasetElements = doc.querySelectorAll('#datasets-list a');\n            const urlElements = doc.querySelectorAll('#datasets-list #url');\n\t\t\n\t  modalData = Array.from(datasetElements).map((dataset) => {\n  return {\n    title: dataset.textContent,\n    url: dataset.getAttribute('href') // Use href if the URLs are in <a> tags\n  };\n});\n\n\n\n            hasFetched = true; // Set the flag to indicate that fetch has been performed\n            resolve();\n          })\n          .catch(error => {\n            console.error('Error updating partial view:', error);\n            reject(error);\n          });\n      } else {\n        resolve();\n      }\n    });\n  }\n  async function openModal() {\n    try {\n      await fetchData(); // Ensure data is fetched\n  \n      // Create and style the modal container\n      const modalContainer = document.createElement('div');\n      modalContainer.style.position = 'fixed';\n      modalContainer.style.top = '0';\n      modalContainer.style.left = '0';\n      modalContainer.style.width = '100%';\n      modalContainer.style.height = '100%';\n      modalContainer.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\n      modalContainer.style.display = 'flex';\n      modalContainer.style.justifyContent = 'center';\n      modalContainer.style.alignItems = 'center';\n      modalContainer.style.zIndex = '1000';\n\n      // Create and style the modal element with fixed dimensions\n      const modal = document.createElement('div');\n      modal.style.backgroundColor = '#fff';\n      modal.style.borderRadius = '8px';\n      modal.style.boxShadow = '0 0 15px rgba(0, 0, 0, 0.3)';\n      modal.style.width = '800px'; // Fixed width\n      modal.style.minHeight = '80vh'; // Minimum height\n      modal.style.maxHeight = '80vh'; // Maximum height\n      modal.style.position = 'relative';\n      modal.style.overflowY = 'auto'; // Prevent scrolling on the modal itself\n      modal.style.padding = '1em'; // Add padding for aesthetic\n      modal.style.boxSizing = 'border-box'; // Include padding in the height calculation\n\n      // Create and style the modal content\n      const modalContent = document.createElement('div');\n      modalContent.id = 'modalContent';\n      modalContent.style.overflow = 'initial'\n      modalContent.style.maxHeight = '50vh'\n\n      // Create and style the search bar\n      const searchBar = document.createElement('input');\n      searchBar.type = 'text';\n      searchBar.placeholder = 'Search...';\n      searchBar.style.width = '100%';\n      searchBar.style.padding = '10px';\n      searchBar.style.boxSizing = 'border-box';\n      searchBar.style.border = '1px solid #ccc';\n      searchBar.style.borderRadius = '5px';\n      searchBar.style.marginBottom = '10px';\n      searchBar.addEventListener('input', filterResults);\n  \n      // Create and style the links container\n      const linksDiv = document.createElement('div');\n      linksDiv.id = 'linksContainer';\n      linksDiv.style.display = 'flex';\n      linksDiv.style.flexDirection = 'column';\n      linksDiv.style.gap = '10px'; // Adjust spacing between items\n  \n      // Create and style the modal title\n      const titleElement = document.createElement('h1');\n      titleElement.textContent = \"Saved Datasets\";\n      titleElement.style.textAlign = 'center';\n      modal.appendChild(titleElement);\n  \n      // Store the original list items\n      const listItems = modalData.map(element => {\n        const listItem = document.createElement('div');\n        listItem.classList.add('list-item');\n        listItem.style.display = 'flex';\n        listItem.style.justifyContent = 'space-between';\n        listItem.style.alignItems = 'center';\n  \n        const link = document.createElement('a');\n        link.href = element.url;\n        link.textContent = element.title;\n        link.target = \"_blank\"; // Open in a new tab/window\n\n        var disabled = false;\n  \n        const copyButton = document.createElement('button');\n        copyButton.textContent = 'Add';\n        copyButton.style.marginLeft = '10px';\n        copyButton.style.borderRadius = '5px';\n        copyButton.style.padding = '5px 10px';\n        copyButton.style.color = 'white';\n        copyButton.style.cursor = 'pointer'; // Set cursor to pointer\n        copyButton.style.backgroundColor = '#2F4EA1'; // Set cursor to pointer\n  \n       \n  \n        // Handle button click to copy and paste text\n          copyButton.addEventListener('click', () => {\n          copyButton.textContent = 'Done';\n          copyButton.disabled = true\n          copyButton.style.color = 'grey';  // Cambia il colore di sfondo\n          copyButton.style.cursor = \"not-allowed\";    // Cambia il cursore\n          copyButton.style.opacity = \"0.6\";\n          copyButton.style.border = '1px solid grey';\n          copyButton.style.backgroundColor = 'transparent'\n          disabled = true;\n          \n          // Call the copyAndPasteText function\n          copyAndPasteText(element.title, element.url);\n        });\n  \n        listItem.appendChild(link);\n        listItem.appendChild(copyButton);\n        linksDiv.appendChild(listItem);\n  \n        return listItem;\n      });\n  \n      // Function to filter results based on the search input\n      function filterResults() {\n        const query = searchBar.value.toLowerCase();\n        listItems.forEach(item => {\n          const title = item.querySelector('a').textContent.toLowerCase();\n          if (title.includes(query)) {\n            item.style.display = 'flex'; // Show item\n          } else {\n            item.style.display = 'none'; // Hide item\n          }\n        });\n      }\n  \n      // Append elements to modal\n      modalContent.appendChild(searchBar);\n      modalContent.appendChild(linksDiv);\n      modal.appendChild(modalContent);\n      modalContainer.appendChild(modal);\n      document.body.appendChild(modalContainer);\n  \n      // Open the modal\n      modalContainer.style.display = 'flex'; // Ensure centering and visibility\n  \n      // Close modal when clicking outside the modal\n      window.addEventListener('click', function (event) {\n        if (event.target === modalContainer) {\n          modalContainer.style.display = 'none';\n        }\n      });\n    } catch (error) {\n      console.error('Failed to open modal:', error);\n    }\n  }\n  \n  \n  // Updated copyAndPasteText function\n  function copyAndPasteText(title, url) {\n  const range = quill.getSelection();\n\n  // Assicurati che range non sia null (ossia c'è una selezione)\n  if (range) {\n    const linkFormat = {\n      link: url,\n      target: '_blank',\n    };\n    \n    // Inserisci il titolo con il link\n    quill.insertText(range.index, title, linkFormat);\n\n    // Imposta la selezione alla fine del titolo\n    quill.setSelection(range.index + title.length);\n\n    // Inserisci un ritorno a capo (\\n)\n    quill.insertText(range.index + title.length, '\\n');\n  }\n}\n\n  \n  const modules = {\n    linebreak: {},\n    toolbar: {\n      container: quillToolbar,\n      handlers: {\n        \"linebreak\": lineBreakButtonHandler,\n        \"savedDataset\": openModal\n      }\n    }\n  };\n\n  const $input = $(container).siblings('input[type=\"hidden\"]');\n  container.innerHTML = $input.val() || \"\";\n  const token = $('meta[name=\"csrf-token\"]').attr(\"content\");\n\n  if ($(container).data(\"editorImages\")) {\n    modules.imageResize = {\n      modules: [\"Resize\", \"DisplaySize\"]\n    };\n    modules.imageUpload = {\n      url: $(container).data(\"uploadImagesPath\"),\n      method: \"POST\",\n      name: \"image\",\n      headers: { \"X-CSRF-Token\": token },\n      callbackOK: (serverResponse, next) => {\n        $(\"div.ql-toolbar\").last().removeClass(\"editor-loading\");\n        next(serverResponse.url);\n      },\n      callbackKO: (serverError) => {\n        $(\"div.ql-toolbar\").last().removeClass(\"editor-loading\");\n        console.log(`Image upload error: ${serverError.message}`);\n      },\n      checkBeforeSend: (file, next) => {\n        $(\"div.ql-toolbar\").last().addClass(\"editor-loading\");\n        next(file);\n      }\n    };\n  }\n\n  const quill = new Quill(container, {\n    modules: modules,\n    formats: quillFormats,\n    theme: \"snow\"\n  });\n\n  if (disabled) {\n    quill.disable();\n  }\n\n  quill.on(\"text-change\", () => {\n    const text = quill.getText();\n\n    let event = new CustomEvent(\"quill-position\", {\n      detail: quill.getSelection()\n    });\n    container.dispatchEvent(event);\n\n    if ((text === \"\\n\" || text === \"\\n\\n\") && quill.root.querySelectorAll(allowedEmptyContentSelector).length === 0) {\n      $input.val(\"\");\n    } else {\n      const emptyParagraph = \"<p><br></p>\";\n      const cleanHTML = quill.root.innerHTML.replace(\n        new RegExp(`^${emptyParagraph}|${emptyParagraph}$`, \"g\"),\n        \"\"\n      );\n      $input.val(cleanHTML);\n    }\n  });\n\n  quill.emitter.emit(\"editor-ready\");\n\n  if ($(container).data(\"editorImages\")) {\n    const text = $(container).data(\"dragAndDropHelpText\");\n    $(container).after(`<p class=\"help-text\" style=\"margin-top:-1.5rem;\">${text}</p>`);\n  }\n\n  return quill;\n}\n\nexport function createMarkdownEditor(container) {\n  const text = DecidimAwesome.texts.drag_and_drop_image;\n  const token = $('meta[name=\"csrf-token\"]').attr(\"content\");\n  const $input = $(container).siblings('input[type=\"hidden\"]');\n  const $faker = $('<textarea name=\"faker-inscrybmde\"/>');\n  const $form = $(container).closest(\"form\");\n  const europa = new Europa();\n  $faker.val(europa.convert($input.val()));\n  $faker.insertBefore($(container));\n  $(container).hide();\n  const inscrybmde = new InscrybMDE({\n    element: $faker[0],\n    spellChecker: false,\n    renderingConfig: {\n      codeSyntaxHighlighting: true,\n      hljs: hljs\n    }\n  });\n  $faker[0].InscrybMDE = inscrybmde;\n\n  // Allow image upload\n  if (DecidimAwesome.allow_images_in_markdown_editor) {\n    $(inscrybmde.gui.statusbar).prepend(`<span class=\"help-text\" style=\"float:left;margin:0;text-align:left;\">${text}</span>`);\n    window.inlineAttachment.editors.codemirror4.attach(inscrybmde.codemirror, {\n      uploadUrl: DecidimAwesome.editor_uploader_path,\n      uploadFieldName: \"image\",\n      jsonFieldName: \"url\",\n      extraHeaders: { \"X-CSRF-Token\": token }\n    });\n  }\n\n  // Allow linebreaks\n  marked.setOptions({\n    breaks: true\n  });\n\n  // Convert to HTML on submit\n  $form.on(\"submit\", () => {\n    $input.val(marked(inscrybmde.value()));\n  });\n}\n"],"names":[],"sourceRoot":""}