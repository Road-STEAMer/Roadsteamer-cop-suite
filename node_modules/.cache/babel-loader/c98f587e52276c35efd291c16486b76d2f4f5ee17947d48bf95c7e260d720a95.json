{"ast":null,"code":"import { Editor } from \"@tiptap/core\";\nimport DecidimKit from \"src/decidim/editor/extensions/decidim_kit\";\nimport createEditorToolbar from \"src/decidim/editor/toolbar\";\nimport { uniqueId } from \"src/decidim/editor/common/helpers\";\n\n/**\n * Creates a new rich text editor instance.\n *\n * @param {HTMLElement} container The element that contains the editor.\n * @return {Editor} The rich text editor instance.\n */\nexport default function createEditor(container) {\n  var _container$dataset;\n  var input = container.parentElement.querySelector(\"input[type=hidden]\");\n  var label = container.parentElement.querySelector(\"label\");\n  var editorContainer = container.querySelector(\".editor-input\");\n  var editorAttributes = {\n    role: \"textbox\",\n    \"aria-multiline\": true\n  };\n  if (label) {\n    var labelId = uniqueId(\"editorlabel\");\n    label.setAttribute(\"id\", labelId);\n    editorAttributes[\"aria-labelledby\"] = labelId;\n  }\n\n  /**\n   * Toolbar features can be one of:\n   *\n   * - basic = only basic controls without headings\n   * - content = basic + headings\n   * - full = basic + headings + image + video\n   */\n  var features = ((_container$dataset = container.dataset) === null || _container$dataset === void 0 ? void 0 : _container$dataset.toolbar) || \"basic\";\n  var options = JSON.parse(container.dataset.options);\n  var context = options.context,\n    contentTypes = options.contentTypes;\n  var decidimOptions = {};\n  if (context !== \"participant\") {\n    decidimOptions.link = {\n      allowTargetControl: true\n    };\n  }\n  if (input.hasAttribute(\"maxlength\")) {\n    decidimOptions.characterCount = {\n      limit: parseInt(input.getAttribute(\"maxlength\"), 10)\n    };\n  }\n  if (features === \"basic\") {\n    decidimOptions.heading = false;\n  }\n  if (features === \"full\") {\n    decidimOptions.videoEmbed = true;\n    var uploadImagesPath = options.uploadImagesPath,\n      uploadDialogSelector = options.uploadDialogSelector;\n    decidimOptions.image = {\n      uploadDialogSelector: uploadDialogSelector,\n      contentTypes: contentTypes.image,\n      uploadImagesPath: uploadImagesPath\n    };\n  }\n  if (container.classList.contains(\"js-hashtags\")) {\n    decidimOptions.hashtag = true;\n  }\n  if (container.classList.contains(\"js-mentions\")) {\n    decidimOptions.mention = true;\n  }\n  if (container.classList.contains(\"js-emojis\")) {\n    decidimOptions.emoji = true;\n  }\n  var editor = new Editor({\n    element: editorContainer,\n    editorProps: {\n      attributes: editorAttributes\n    },\n    content: input.value,\n    editable: !input.disabled,\n    extensions: [DecidimKit.configure(decidimOptions)]\n  });\n  var toolbar = createEditorToolbar(editor);\n  container.insertBefore(toolbar, editorContainer);\n  editor.on(\"update\", function () {\n    return input.value = editor.getHTML();\n  });\n  return editor;\n}","map":{"version":3,"names":["Editor","DecidimKit","createEditorToolbar","uniqueId","createEditor","container","_container$dataset","input","parentElement","querySelector","label","editorContainer","editorAttributes","role","labelId","setAttribute","features","dataset","toolbar","options","JSON","parse","context","contentTypes","decidimOptions","link","allowTargetControl","hasAttribute","characterCount","limit","parseInt","getAttribute","heading","videoEmbed","uploadImagesPath","uploadDialogSelector","image","classList","contains","hashtag","mention","emoji","editor","element","editorProps","attributes","content","value","editable","disabled","extensions","configure","insertBefore","on","getHTML"],"sources":["/home/daniele/decidim_idra-main/app/packs/src/decidim/editor/index.js"],"sourcesContent":["import { Editor } from \"@tiptap/core\";\n\nimport DecidimKit from \"src/decidim/editor/extensions/decidim_kit\";\n\nimport createEditorToolbar from \"src/decidim/editor/toolbar\";\nimport { uniqueId } from \"src/decidim/editor/common/helpers\";\n\n/**\n * Creates a new rich text editor instance.\n *\n * @param {HTMLElement} container The element that contains the editor.\n * @return {Editor} The rich text editor instance.\n */\nexport default function createEditor(container) {\n  const input = container.parentElement.querySelector(\"input[type=hidden]\");\n  const label = container.parentElement.querySelector(\"label\");\n  const editorContainer = container.querySelector(\".editor-input\");\n\n  const editorAttributes = { role: \"textbox\", \"aria-multiline\": true };\n  if (label) {\n    const labelId = uniqueId(\"editorlabel\");\n    label.setAttribute(\"id\", labelId);\n    editorAttributes[\"aria-labelledby\"] = labelId;\n  }\n\n  /**\n   * Toolbar features can be one of:\n   *\n   * - basic = only basic controls without headings\n   * - content = basic + headings\n   * - full = basic + headings + image + video\n   */\n  const features = container.dataset?.toolbar || \"basic\";\n  const options = JSON.parse(container.dataset.options);\n  const { context, contentTypes } = options;\n\n  const decidimOptions = {};\n\n  if (context !== \"participant\") {\n    decidimOptions.link = { allowTargetControl: true };\n  }\n\n  if (input.hasAttribute(\"maxlength\")) {\n    decidimOptions.characterCount = { limit: parseInt(input.getAttribute(\"maxlength\"), 10) };\n  }\n\n  if (features === \"basic\") {\n    decidimOptions.heading = false;\n  }\n\n  if (features === \"full\") {\n    decidimOptions.videoEmbed = true;\n\n    const { uploadImagesPath, uploadDialogSelector } = options;\n    decidimOptions.image = {\n      uploadDialogSelector,\n      contentTypes: contentTypes.image,\n      uploadImagesPath\n    };\n  }\n\n  if (container.classList.contains(\"js-hashtags\")) {\n    decidimOptions.hashtag = true;\n  }\n  if (container.classList.contains(\"js-mentions\")) {\n    decidimOptions.mention = true;\n  }\n  if (container.classList.contains(\"js-emojis\")) {\n    decidimOptions.emoji = true;\n  }\n\n  const editor = new Editor({\n    element: editorContainer,\n    editorProps: { attributes: editorAttributes },\n    content: input.value,\n    editable: !input.disabled,\n    extensions: [DecidimKit.configure(decidimOptions)]\n  });\n\n  const toolbar = createEditorToolbar(editor);\n  container.insertBefore(toolbar, editorContainer);\n\n  editor.on(\"update\", () => (input.value = editor.getHTML()));\n\n  return editor;\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,cAAc;AAErC,OAAOC,UAAU,MAAM,2CAA2C;AAElE,OAAOC,mBAAmB,MAAM,4BAA4B;AAC5D,SAASC,QAAQ,QAAQ,mCAAmC;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,YAAYA,CAACC,SAAS,EAAE;EAAA,IAAAC,kBAAA;EAC9C,IAAMC,KAAK,GAAGF,SAAS,CAACG,aAAa,CAACC,aAAa,CAAC,oBAAoB,CAAC;EACzE,IAAMC,KAAK,GAAGL,SAAS,CAACG,aAAa,CAACC,aAAa,CAAC,OAAO,CAAC;EAC5D,IAAME,eAAe,GAAGN,SAAS,CAACI,aAAa,CAAC,eAAe,CAAC;EAEhE,IAAMG,gBAAgB,GAAG;IAAEC,IAAI,EAAE,SAAS;IAAE,gBAAgB,EAAE;EAAK,CAAC;EACpE,IAAIH,KAAK,EAAE;IACT,IAAMI,OAAO,GAAGX,QAAQ,CAAC,aAAa,CAAC;IACvCO,KAAK,CAACK,YAAY,CAAC,IAAI,EAAED,OAAO,CAAC;IACjCF,gBAAgB,CAAC,iBAAiB,CAAC,GAAGE,OAAO;EAC/C;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAME,QAAQ,GAAG,EAAAV,kBAAA,GAAAD,SAAS,CAACY,OAAO,cAAAX,kBAAA,uBAAjBA,kBAAA,CAAmBY,OAAO,KAAI,OAAO;EACtD,IAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAAChB,SAAS,CAACY,OAAO,CAACE,OAAO,CAAC;EACrD,IAAQG,OAAO,GAAmBH,OAAO,CAAjCG,OAAO;IAAEC,YAAY,GAAKJ,OAAO,CAAxBI,YAAY;EAE7B,IAAMC,cAAc,GAAG,CAAC,CAAC;EAEzB,IAAIF,OAAO,KAAK,aAAa,EAAE;IAC7BE,cAAc,CAACC,IAAI,GAAG;MAAEC,kBAAkB,EAAE;IAAK,CAAC;EACpD;EAEA,IAAInB,KAAK,CAACoB,YAAY,CAAC,WAAW,CAAC,EAAE;IACnCH,cAAc,CAACI,cAAc,GAAG;MAAEC,KAAK,EAAEC,QAAQ,CAACvB,KAAK,CAACwB,YAAY,CAAC,WAAW,CAAC,EAAE,EAAE;IAAE,CAAC;EAC1F;EAEA,IAAIf,QAAQ,KAAK,OAAO,EAAE;IACxBQ,cAAc,CAACQ,OAAO,GAAG,KAAK;EAChC;EAEA,IAAIhB,QAAQ,KAAK,MAAM,EAAE;IACvBQ,cAAc,CAACS,UAAU,GAAG,IAAI;IAEhC,IAAQC,gBAAgB,GAA2Bf,OAAO,CAAlDe,gBAAgB;MAAEC,oBAAoB,GAAKhB,OAAO,CAAhCgB,oBAAoB;IAC9CX,cAAc,CAACY,KAAK,GAAG;MACrBD,oBAAoB,EAApBA,oBAAoB;MACpBZ,YAAY,EAAEA,YAAY,CAACa,KAAK;MAChCF,gBAAgB,EAAhBA;IACF,CAAC;EACH;EAEA,IAAI7B,SAAS,CAACgC,SAAS,CAACC,QAAQ,CAAC,aAAa,CAAC,EAAE;IAC/Cd,cAAc,CAACe,OAAO,GAAG,IAAI;EAC/B;EACA,IAAIlC,SAAS,CAACgC,SAAS,CAACC,QAAQ,CAAC,aAAa,CAAC,EAAE;IAC/Cd,cAAc,CAACgB,OAAO,GAAG,IAAI;EAC/B;EACA,IAAInC,SAAS,CAACgC,SAAS,CAACC,QAAQ,CAAC,WAAW,CAAC,EAAE;IAC7Cd,cAAc,CAACiB,KAAK,GAAG,IAAI;EAC7B;EAEA,IAAMC,MAAM,GAAG,IAAI1C,MAAM,CAAC;IACxB2C,OAAO,EAAEhC,eAAe;IACxBiC,WAAW,EAAE;MAAEC,UAAU,EAAEjC;IAAiB,CAAC;IAC7CkC,OAAO,EAAEvC,KAAK,CAACwC,KAAK;IACpBC,QAAQ,EAAE,CAACzC,KAAK,CAAC0C,QAAQ;IACzBC,UAAU,EAAE,CAACjD,UAAU,CAACkD,SAAS,CAAC3B,cAAc,CAAC;EACnD,CAAC,CAAC;EAEF,IAAMN,OAAO,GAAGhB,mBAAmB,CAACwC,MAAM,CAAC;EAC3CrC,SAAS,CAAC+C,YAAY,CAAClC,OAAO,EAAEP,eAAe,CAAC;EAEhD+B,MAAM,CAACW,EAAE,CAAC,QAAQ,EAAE;IAAA,OAAO9C,KAAK,CAACwC,KAAK,GAAGL,MAAM,CAACY,OAAO,EAAE;EAAA,CAAC,CAAC;EAE3D,OAAOZ,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}