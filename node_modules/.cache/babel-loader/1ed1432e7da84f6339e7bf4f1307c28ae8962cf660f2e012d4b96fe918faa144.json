{"ast":null,"code":"import { textblockTypeInputRule } from \"@tiptap/core\";\nimport Heading from \"@tiptap/extension-heading\";\n\n/**\n * Customized version of the Heading extension in order to fix compatibility\n * issue with the Hashtag extension. The default input rule of the Heading\n * extension would also match any paragraphs that have only one hashtag in them\n * and nothing else because that indicates the first level of heading.\n *\n * E.g.\n * - If you have the following paragraph: `<p>#apples</p>`\n * - This would be converted to a paragraph containing the hashtag node markup\n *   in the editor.\n * - If you come back to edit this content and try to enter a space right after\n *   the hashtag, the hashtag would disappear and the active text block would\n *   get the second heading level applied to it\n *\n * Since we do not allow the user to enter the first level of headings through\n * the editor, we can fix this by limiting the markdown shortcut to the second\n * level headings and above.\n */\nexport default Heading.extend({\n  addInputRules: function addInputRules() {\n    var _this = this;\n    return this.options.levels.map(function (level) {\n      return textblockTypeInputRule({\n        find: new RegExp(\"^(#{2,\".concat(level, \"})\\\\s$\")),\n        type: _this.type,\n        getAttributes: {\n          level: level\n        }\n      });\n    });\n  }\n});","map":{"version":3,"names":["textblockTypeInputRule","Heading","extend","addInputRules","_this","options","levels","map","level","find","RegExp","concat","type","getAttributes"],"sources":["/home/daniele/decidim_idra-main/app/packs/src/decidim/editor/extensions/heading/index.js"],"sourcesContent":["import { textblockTypeInputRule } from \"@tiptap/core\";\n\nimport Heading from \"@tiptap/extension-heading\";\n\n/**\n * Customized version of the Heading extension in order to fix compatibility\n * issue with the Hashtag extension. The default input rule of the Heading\n * extension would also match any paragraphs that have only one hashtag in them\n * and nothing else because that indicates the first level of heading.\n *\n * E.g.\n * - If you have the following paragraph: `<p>#apples</p>`\n * - This would be converted to a paragraph containing the hashtag node markup\n *   in the editor.\n * - If you come back to edit this content and try to enter a space right after\n *   the hashtag, the hashtag would disappear and the active text block would\n *   get the second heading level applied to it\n *\n * Since we do not allow the user to enter the first level of headings through\n * the editor, we can fix this by limiting the markdown shortcut to the second\n * level headings and above.\n */\nexport default Heading.extend({\n  addInputRules() {\n    return this.options.levels.map((level) => {\n      return textblockTypeInputRule({\n        find: new RegExp(`^(#{2,${level}})\\\\s$`),\n        type: this.type,\n        getAttributes: { level }\n      })\n    })\n  }\n});\n"],"mappings":"AAAA,SAASA,sBAAsB,QAAQ,cAAc;AAErD,OAAOC,OAAO,MAAM,2BAA2B;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeA,OAAO,CAACC,MAAM,CAAC;EAC5BC,aAAa,WAAAA,cAAA,EAAG;IAAA,IAAAC,KAAA;IACd,OAAO,IAAI,CAACC,OAAO,CAACC,MAAM,CAACC,GAAG,CAAC,UAACC,KAAK,EAAK;MACxC,OAAOR,sBAAsB,CAAC;QAC5BS,IAAI,EAAE,IAAIC,MAAM,UAAAC,MAAA,CAAUH,KAAK,YAAS;QACxCI,IAAI,EAAER,KAAI,CAACQ,IAAI;QACfC,aAAa,EAAE;UAAEL,KAAK,EAALA;QAAM;MACzB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}