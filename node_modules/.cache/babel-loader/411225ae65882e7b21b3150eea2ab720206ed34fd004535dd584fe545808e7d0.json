{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\n/* eslint-disable require-jsdoc */\n\nimport lineBreakButtonHandler from \"src/decidim/editor/linebreak_module\";\nimport \"src/decidim/editor/clipboard_override\";\nimport \"src/decidim/vendor/image-resize.min\";\nimport \"src/decidim/vendor/image-upload.min\";\nvar quillFormats = [\"bold\", \"italic\", \"link\", \"underline\", \"header\", \"list\", \"video\", \"image\", \"alt\", \"break\", \"width\", \"style\", \"code\", \"blockquote\", \"indent\"];\nexport default function createQuillEditor(container) {\n  var toolbar = $(container).data(\"toolbar\");\n  var disabled = $(container).data(\"disabled\");\n  var allowedEmptyContentSelector = \"iframe\";\n  var quillToolbar = [[\"bold\", \"italic\", \"underline\", \"linebreak\"], [{\n    list: \"ordered\"\n  }, {\n    list: \"bullet\"\n  }], [\"link\", \"clean\"], [\"code\", \"blockquote\"], [{\n    \"indent\": \"-1\"\n  }, {\n    \"indent\": \"+1\"\n  }], [{\n    'savedDataset': \"openModal\"\n  }]];\n  var addImage = $(container).data(\"editorImages\");\n  if (toolbar === \"full\") {\n    quillToolbar = [[{\n      header: [2, 3, 4, 5, 6, false]\n    }]].concat(_toConsumableArray(quillToolbar), [[\"video\"]]);\n  } else if (toolbar === \"basic\") {\n    quillToolbar = [].concat(_toConsumableArray(quillToolbar), [[\"video\"]]);\n  }\n  var modalData = [];\n  var hasFetched = false; // Add this flag\n\n  // Function to fetch data\n  function fetchData() {\n    if (!hasFetched) {\n      // Check if fetch hasn't been performed yet\n      fetch('/idra_update', {\n        method: 'GET'\n      }).then(function (response) {\n        if (response.ok) {\n          return response.text(); // Assuming the response is HTML\n        } else {\n          throw new Error('Failed to fetch the updated content');\n        }\n      }).then(function (data) {\n        // Parse the HTML response to extract the anchor text\n        var parser = new DOMParser();\n        var doc = parser.parseFromString(data, 'text/html');\n        var anchorElements = doc.querySelectorAll('#datasets-list a');\n        anchorElements.forEach(function (anchor) {\n          modalData.push(anchor.textContent);\n        });\n      })[\"catch\"](function (error) {\n        console.error('Error updating partial view:', error);\n      });\n      hasFetched = true; // Set the flag to indicate that fetch has been performed\n    }\n  }\n\n  // Call the fetchData function\n  fetchData();\n\n  // Function to create and display the modal\n  function openModal() {\n    // Create a modal container\n    var modalContainer = document.createElement('div');\n    modalContainer.classList.add('modal-container');\n\n    // Create a modal element\n    var modal = document.createElement('div');\n    modal.classList.add('modal');\n\n    // Modal content\n    var modalContent = document.createElement('div');\n    modalContent.classList.add('modal-content');\n    modalContent.id = 'modalContent';\n\n    // Create an unordered list to display the elements as a list\n    // Create a div for the links\n    var linksDiv = document.createElement('div');\n    linksDiv.classList.add('links-column');\n\n    // Loop through modalData array and create links with click event listeners\n    modalData.forEach(function (element) {\n      var link = document.createElement('a');\n      link.href = '#'; // Set a placeholder href\n      link.textContent = element;\n      linksDiv.appendChild(link);\n\n      // Add click event listener to the link\n      link.addEventListener('click', function (e) {\n        e.preventDefault(); // Prevent the link from navigating\n\n        // Copy and paste the link text into the Quill editor\n        copyAndPasteText(element);\n        modalContainer.style.display = 'none'; // Close the modal\n      });\n\n      // Add a line break after each link, except the last one\n      if (element !== modalData[modalData.length - 1]) {\n        linksDiv.appendChild(document.createElement('br'));\n      }\n    });\n\n    // Function to copy and paste the text into the Quill editor\n    // Function to copy and paste the text as links into the Quill editor\n    function copyAndPasteText(textToCopy) {\n      var range = quill.getSelection();\n      var linkFormat = {\n        link: textToCopy,\n        // Use the text as the link value\n        target: '_blank' // Open the link in a new tab\n      };\n\n      quill.format('link', false); // Remove any existing link formats\n      quill.formatText(range.index, textToCopy.length, linkFormat, 'user');\n      quill.setSelection(range.index + textToCopy.length, 0, 'user');\n    }\n    modalContent.appendChild(ul);\n    modal.appendChild(modalContent);\n    modalContainer.appendChild(modal);\n    document.body.appendChild(modalContainer);\n\n    // Open the modal\n    modalContainer.style.display = 'block';\n\n    // Close modal when clicking outside the modal\n    window.addEventListener('click', function (event) {\n      if (event.target == modalContainer) {\n        modalContainer.style.display = 'none';\n      }\n    });\n  }\n  var modules = {\n    linebreak: {},\n    toolbar: {\n      container: quillToolbar,\n      handlers: {\n        \"linebreak\": lineBreakButtonHandler,\n        \"savedDataset\": openModal\n      }\n    }\n  };\n  var $input = $(container).siblings('input[type=\"hidden\"]');\n  container.innerHTML = $input.val() || \"\";\n  var token = $('meta[name=\"csrf-token\"]').attr(\"content\");\n  if (addImage) {\n    modules.imageResize = {\n      modules: [\"Resize\", \"DisplaySize\"]\n    };\n    modules.imageUpload = {\n      url: $(container).data(\"uploadImagesPath\"),\n      method: \"POST\",\n      name: \"image\",\n      withCredentials: false,\n      headers: {\n        \"X-CSRF-Token\": token\n      },\n      callbackOK: function callbackOK(serverResponse, next) {\n        $(\"div.ql-toolbar\").last().removeClass(\"editor-loading\");\n        next(serverResponse.url);\n      },\n      callbackKO: function callbackKO(serverError) {\n        $(\"div.ql-toolbar\").last().removeClass(\"editor-loading\");\n        console.log(\"Image upload error: \".concat(serverError.message));\n      },\n      checkBeforeSend: function checkBeforeSend(file, next) {\n        $(\"div.ql-toolbar\").last().addClass(\"editor-loading\");\n        next(file);\n      }\n    };\n  }\n  var quill = new Quill(container, {\n    modules: modules,\n    formats: quillFormats,\n    theme: \"snow\"\n  });\n  if (disabled) {\n    quill.disable();\n  }\n  quill.on(\"text-change\", function () {\n    var text = quill.getText();\n\n    // Triggers CustomEvent with the cursor position\n    // It is required in input_mentions.js\n    var event = new CustomEvent(\"quill-position\", {\n      detail: quill.getSelection()\n    });\n    container.dispatchEvent(event);\n    if ((text === \"\\n\" || text === \"\\n\\n\") && quill.root.querySelectorAll(allowedEmptyContentSelector).length === 0) {\n      $input.val(\"\");\n    } else {\n      var emptyParagraph = \"<p><br></p>\";\n      var cleanHTML = quill.root.innerHTML.replace(new RegExp(\"^\".concat(emptyParagraph, \"|\").concat(emptyParagraph, \"$\"), \"g\"), \"\");\n      $input.val(cleanHTML);\n    }\n  });\n  // After editor is ready, linebreak_module deletes two extraneous new lines\n  quill.emitter.emit(\"editor-ready\");\n  if (addImage) {\n    var text = $(container).data(\"dragAndDropHelpText\");\n    $(container).after(\"<p class=\\\"help-text\\\" style=\\\"margin-top:-1.5rem;\\\">\".concat(text, \"</p>\"));\n  }\n\n  // After editor is ready, linebreak_module deletes two extraneous new lines\n  quill.emitter.emit(\"editor-ready\");\n  return quill;\n}","map":{"version":3,"names":["lineBreakButtonHandler","quillFormats","createQuillEditor","container","toolbar","$","data","disabled","allowedEmptyContentSelector","quillToolbar","list","addImage","header","concat","_toConsumableArray","modalData","hasFetched","fetchData","fetch","method","then","response","ok","text","Error","parser","DOMParser","doc","parseFromString","anchorElements","querySelectorAll","forEach","anchor","push","textContent","error","console","openModal","modalContainer","document","createElement","classList","add","modal","modalContent","id","linksDiv","element","link","href","appendChild","addEventListener","e","preventDefault","copyAndPasteText","style","display","length","textToCopy","range","quill","getSelection","linkFormat","target","format","formatText","index","setSelection","ul","body","window","event","modules","linebreak","handlers","$input","siblings","innerHTML","val","token","attr","imageResize","imageUpload","url","name","withCredentials","headers","callbackOK","serverResponse","next","last","removeClass","callbackKO","serverError","log","message","checkBeforeSend","file","addClass","Quill","formats","theme","disable","on","getText","CustomEvent","detail","dispatchEvent","root","emptyParagraph","cleanHTML","replace","RegExp","emitter","emit","after"],"sources":["/home/daniele/decidim_idra/app/packs/src/decidim/editor.js"],"sourcesContent":["/* eslint-disable require-jsdoc */\n\n\nimport lineBreakButtonHandler from \"src/decidim/editor/linebreak_module\"\nimport \"src/decidim/editor/clipboard_override\"\nimport \"src/decidim/vendor/image-resize.min\"\nimport \"src/decidim/vendor/image-upload.min\"\n\nconst quillFormats = [\"bold\", \"italic\", \"link\", \"underline\", \"header\", \"list\", \"video\", \"image\", \"alt\", \"break\", \"width\", \"style\", \"code\", \"blockquote\", \"indent\"];\n\nexport default function createQuillEditor(container) {\n  const toolbar = $(container).data(\"toolbar\");\n  const disabled = $(container).data(\"disabled\");\n\n  const allowedEmptyContentSelector = \"iframe\";\n  let quillToolbar = [\n    [\"bold\", \"italic\", \"underline\", \"linebreak\",],\n    [{ list: \"ordered\" }, { list: \"bullet\" }],\n    [\"link\", \"clean\"],\n    [\"code\", \"blockquote\"],\n    [{ \"indent\": \"-1\"}, { \"indent\": \"+1\" }],\n    [{'savedDataset':\"openModal\"}]\n  ]\n\n\n\n\n\n  let addImage = $(container).data(\"editorImages\");\n\n  if (toolbar === \"full\") {\n    quillToolbar = [\n      [{ header: [2, 3, 4, 5, 6, false] }],\n      ...quillToolbar,\n      [\"video\"]\n    ];\n  } else if (toolbar === \"basic\") {\n    quillToolbar = [\n      ...quillToolbar,\n      [\"video\"]\n    ];\n  }\n\n\n  let modalData = [];\n  let hasFetched = false; // Add this flag\n  \n  // Function to fetch data\n  function fetchData() {\n    if (!hasFetched) { // Check if fetch hasn't been performed yet\n      fetch('/idra_update', {\n        method: 'GET'\n      })\n        .then(response => {\n          if (response.ok) {\n            return response.text(); // Assuming the response is HTML\n          } else {\n            throw new Error('Failed to fetch the updated content');\n          }\n        })\n        .then(data => {\n          // Parse the HTML response to extract the anchor text\n          const parser = new DOMParser();\n          const doc = parser.parseFromString(data, 'text/html');\n          const anchorElements = doc.querySelectorAll('#datasets-list a');\n          \n          anchorElements.forEach(anchor => {\n            modalData.push(anchor.textContent);\n          });\n  \n        })\n        .catch(error => {\n          console.error('Error updating partial view:', error);\n        });\n        \n        hasFetched = true; // Set the flag to indicate that fetch has been performed\n      }\n  }\n  \n  // Call the fetchData function\n  fetchData();\n  \n\n// Function to create and display the modal\nfunction openModal() {\n  // Create a modal container\n  var modalContainer = document.createElement('div');\n  modalContainer.classList.add('modal-container');\n\n  // Create a modal element\n  var modal = document.createElement('div');\n  modal.classList.add('modal');\n\n  // Modal content\n  var modalContent = document.createElement('div');\n  modalContent.classList.add('modal-content');\n  modalContent.id = 'modalContent';\n\n  // Create an unordered list to display the elements as a list\n    // Create a div for the links\n    var linksDiv = document.createElement('div');\n    linksDiv.classList.add('links-column');\n  \n    // Loop through modalData array and create links with click event listeners\n    modalData.forEach(function (element) {\n      var link = document.createElement('a');\n      link.href = '#'; // Set a placeholder href\n      link.textContent = element;\n      linksDiv.appendChild(link);\n  \n      // Add click event listener to the link\n      link.addEventListener('click', function (e) {\n        e.preventDefault(); // Prevent the link from navigating\n  \n        // Copy and paste the link text into the Quill editor\n        copyAndPasteText(element);\n  \n        modalContainer.style.display = 'none'; // Close the modal\n      });\n  \n      // Add a line break after each link, except the last one\n      if (element !== modalData[modalData.length - 1]) {\n        linksDiv.appendChild(document.createElement('br'));\n      }\n    });\n  \n  // Function to copy and paste the text into the Quill editor\n// Function to copy and paste the text as links into the Quill editor\nfunction copyAndPasteText(textToCopy) {\n  const range = quill.getSelection();\n  const linkFormat = {\n    link: textToCopy, // Use the text as the link value\n    target: '_blank' // Open the link in a new tab\n  };\n\n  quill.format('link', false); // Remove any existing link formats\n  quill.formatText(range.index, textToCopy.length, linkFormat, 'user');\n  quill.setSelection(range.index + textToCopy.length, 0, 'user');\n}\n\n\n  modalContent.appendChild(ul);\n  modal.appendChild(modalContent);\n  modalContainer.appendChild(modal);\n  document.body.appendChild(modalContainer);\n\n  // Open the modal\n  modalContainer.style.display = 'block';\n\n  // Close modal when clicking outside the modal\n  window.addEventListener('click', function (event) {\n    if (event.target == modalContainer) {\n      modalContainer.style.display = 'none';\n    }\n  });\n}\n\n\n  let modules = {\n    linebreak: {},\n    toolbar: {\n      container: quillToolbar,\n      handlers: {\n        \"linebreak\": lineBreakButtonHandler,\n        \"savedDataset\": openModal,\n      }\n    }\n  };\n\n\n  const $input = $(container).siblings('input[type=\"hidden\"]');\n  container.innerHTML = $input.val() || \"\";\n  const token = $('meta[name=\"csrf-token\"]').attr(\"content\");\n  if (addImage) {\n    modules.imageResize = {\n      modules: [\"Resize\", \"DisplaySize\"]\n    }\n    modules.imageUpload = {\n      url: $(container).data(\"uploadImagesPath\"),\n      method: \"POST\",\n      name: \"image\",\n      withCredentials: false,\n      headers: { \"X-CSRF-Token\": token },\n      callbackOK: (serverResponse, next) => {\n        $(\"div.ql-toolbar\").last().removeClass(\"editor-loading\")\n        next(serverResponse.url);\n      },\n      callbackKO: (serverError) => {\n        $(\"div.ql-toolbar\").last().removeClass(\"editor-loading\")\n        console.log(`Image upload error: ${serverError.message}`);\n      },\n      checkBeforeSend: (file, next) => {\n        $(\"div.ql-toolbar\").last().addClass(\"editor-loading\")\n        next(file);\n      }\n    }\n  }\n  const quill = new Quill(container, {\n    modules: modules,\n    formats: quillFormats,\n    theme: \"snow\"\n  });\n\n  \n\n  if (disabled) {\n    quill.disable();\n  }\n\n  quill.on(\"text-change\", () => {\n    const text = quill.getText();\n\n    // Triggers CustomEvent with the cursor position\n    // It is required in input_mentions.js\n    let event = new CustomEvent(\"quill-position\", {\n      detail: quill.getSelection()\n    });\n    container.dispatchEvent(event);\n\n    if ((text === \"\\n\" || text === \"\\n\\n\") && quill.root.querySelectorAll(allowedEmptyContentSelector).length === 0) {\n      $input.val(\"\");\n    } else {\n      const emptyParagraph = \"<p><br></p>\";\n      const cleanHTML = quill.root.innerHTML.replace(\n        new RegExp(`^${emptyParagraph}|${emptyParagraph}$`, \"g\"),\n        \"\"\n      );\n      $input.val(cleanHTML);\n    }\n  });\n  // After editor is ready, linebreak_module deletes two extraneous new lines\n  quill.emitter.emit(\"editor-ready\");\n\n  if (addImage) {\n    const text = $(container).data(\"dragAndDropHelpText\");\n    $(container).after(`<p class=\"help-text\" style=\"margin-top:-1.5rem;\">${text}</p>`);\n  }\n\n  // After editor is ready, linebreak_module deletes two extraneous new lines\n  quill.emitter.emit(\"editor-ready\");\n\n  return quill;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}