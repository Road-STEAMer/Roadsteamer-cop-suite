{"ast":null,"code":"function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nfunction _classCallCheck(a, n) {\n  if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction _defineProperties(e, r) {\n  for (var t = 0; t < r.length; t++) {\n    var o = r[t];\n    o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);\n  }\n}\nfunction _createClass(e, r, t) {\n  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport ApiFetcher from \"src/decidim/decidim_awesome/awesome_map/api/api_fetcher\";\nvar Fetcher = /*#__PURE__*/function () {\n  function Fetcher(controller) {\n    _classCallCheck(this, Fetcher);\n    this.controller = controller;\n    this.config = {\n      length: controller.awesomeMap.config.length || 255\n    };\n    this.onFinished = function () {};\n    this.onNode = function () {};\n    this.onCollection = function () {};\n    this.hashtags = [];\n    this.collection = this.controller.component.type;\n    // override in specific components:\n    this.query = \"query ($id: ID!, $after: String!) {\\n        component(id: $id) {\\n          id\\n          __typename\\n        }\\n      }\";\n  }\n  return _createClass(Fetcher, [{\n    key: \"fetch\",\n    value: function fetch() {\n      var _this = this;\n      var after = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n      var variables = {\n        \"id\": this.controller.component.id,\n        \"after\": after\n      };\n      var api = new ApiFetcher(this.query, variables);\n      api.fetchAll(function (result) {\n        if (result) {\n          var collection = result.component[_this.collection];\n          // console.log(\"collection\",collection)\n\n          collection.edges.forEach(function (element) {\n            var node = element.node;\n            if (!node) {\n              return;\n            }\n            if (node.coordinates && node.coordinates.latitude && node.coordinates.longitude) {\n              _this.decorateNode(node);\n              _this.onNode(node);\n            }\n          });\n          _this.onCollection(collection);\n          if (collection.pageInfo.hasNextPage) {\n            _this.fetch(collection.pageInfo.endCursor);\n          } else {\n            _this.onFinished();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"decorateNode\",\n    value: function decorateNode(node) {\n      var body = this.findTranslation(node.body.translations);\n      var title = this.findTranslation(node.title.translations);\n      node.hashtags = this.collectHashtags(title);\n      node.hashtags = node.hashtags.concat(this.collectHashtags(body));\n      // hashtags in the title look ugly, lets replace the gid:... structure with the tag #name\n      node.title.translation = this.replaceHashtags(title, node.hashtags);\n      node.body.translation = this.appendHtmlHashtags(this.truncate(this.removeHashtags(body)).replace(/\\n/g, \"<br>\"), node.hashtags);\n      node.link = \"\".concat(this.controller.component.url, \"/\").concat(this.collection, \"/\").concat(node.id);\n    }\n  }, {\n    key: \"findTranslation\",\n    value: function findTranslation(translations) {\n      var lang = document.querySelector(\"html\").getAttribute(\"lang\"),\n        text = \"\";\n      translations.forEach(function (txt) {\n        if (txt.text) {\n          if (!text || txt.locale === lang) {\n            text = txt.text;\n          }\n        }\n      });\n      return text;\n    }\n  }, {\n    key: \"collectHashtags\",\n    value: function collectHashtags(text) {\n      var _this2 = this;\n      var tags = [];\n      if (text) {\n        var gids = text.match(/gid:\\/\\/[^\\s<&]+/g);\n        if (gids) {\n          tags = gids.filter(function (gid) {\n            return gid.indexOf(\"/Decidim::Hashtag/\") !== -1;\n          }).map(function (gid) {\n            var parts = gid.split(\"/\");\n            var fromSelector = parts[5].charAt(0) === \"_\";\n            var tag = fromSelector ? parts[5].substr(1) : parts[5]; // eslint-disable-line no-ternary, multiline-ternary\n            var name = \"#\".concat(tag);\n            var html = \"<a href=\\\"/search?term=\".concat(name, \"\\\">\").concat(name, \"</a>\");\n            var hashtag = {\n              color: getComputedStyle(document.documentElement).getPropertyValue(\"--secondary\"),\n              gid: gid,\n              id: parseInt(parts[4], 10),\n              fromSelector: fromSelector,\n              tag: tag,\n              name: name,\n              html: html\n            };\n            _this2.hashtags.push(hashtag);\n            return hashtag;\n          });\n        }\n      }\n      return tags;\n    }\n  }, {\n    key: \"replaceHashtags\",\n    value: function replaceHashtags(txt, hashtags) {\n      var text = txt;\n      hashtags.forEach(function (tag) {\n        text = text.replace(tag.gid, tag.name);\n      });\n      return text;\n    }\n  }, {\n    key: \"removeHashtags\",\n    value: function removeHashtags(text) {\n      return text.replace(/gid:\\/\\/[^\\s<&]+/g, \"\");\n    }\n  }, {\n    key: \"appendHtmlHashtags\",\n    value: function appendHtmlHashtags(txt, tags) {\n      var text = txt;\n      tags.forEach(function (tag) {\n        text += \" \".concat(tag.html);\n      });\n      return text;\n    }\n  }, {\n    key: \"truncate\",\n    value: function truncate(html) {\n      return $.truncate(html, this.config);\n    }\n  }]);\n}();\nexport { Fetcher as default };","map":{"version":3,"names":["ApiFetcher","Fetcher","controller","_classCallCheck","config","length","awesomeMap","onFinished","onNode","onCollection","hashtags","collection","component","type","query","_createClass","key","value","fetch","_this","after","arguments","undefined","variables","id","api","fetchAll","result","edges","forEach","element","node","coordinates","latitude","longitude","decorateNode","pageInfo","hasNextPage","endCursor","body","findTranslation","translations","title","collectHashtags","concat","translation","replaceHashtags","appendHtmlHashtags","truncate","removeHashtags","replace","link","url","lang","document","querySelector","getAttribute","text","txt","locale","_this2","tags","gids","match","filter","gid","indexOf","map","parts","split","fromSelector","charAt","tag","substr","name","html","hashtag","color","getComputedStyle","documentElement","getPropertyValue","parseInt","push","$","default"],"sources":["/home/daniele/.rbenv/versions/3.0.2/lib/ruby/gems/3.0.0/gems/decidim-decidim_awesome-0.10.2/app/packs/src/decidim/decidim_awesome/awesome_map/api/fetcher.js"],"sourcesContent":["import ApiFetcher from \"src/decidim/decidim_awesome/awesome_map/api/api_fetcher\";\n\nexport default class Fetcher {\n  constructor(controller) {\n    this.controller = controller;\n    this.config = {\n      length: controller.awesomeMap.config.length || 255\n    };\n    this.onFinished = () => {};\n    this.onNode = () => {};\n    this.onCollection = () => {};\n    this.hashtags = [];\n\n    this.collection = this.controller.component.type;\n    // override in specific components:\n    this.query = `query ($id: ID!, $after: String!) {\n        component(id: $id) {\n          id\n          __typename\n        }\n      }`;\n  }\n\n  fetch(after = \"\") {\n    const variables = {\n      \"id\": this.controller.component.id,\n      \"after\": after\n    };\n    const api = new ApiFetcher(this.query, variables);\n    api.fetchAll((result) => {\n      if (result) {\n        const collection = result.component[this.collection];\n        // console.log(\"collection\",collection)\n        \n        collection.edges.forEach((element) => {\n          let node = element.node;\n          if (!node) {\n            return;\n          }\n      \n          if (node.coordinates && node.coordinates.latitude && node.coordinates.longitude) {\n            this.decorateNode(node);\n            this.onNode(node)\n          }\n        });\n\n        this.onCollection(collection);\n\n        if (collection.pageInfo.hasNextPage) {\n          this.fetch(collection.pageInfo.endCursor);\n        } else {\n          this.onFinished();\n        }\n      }\n    });\n  }\n\n  decorateNode(node) {\n    const body = this.findTranslation(node.body.translations);\n    const title = this.findTranslation(node.title.translations);\n    node.hashtags = this.collectHashtags(title);\n    node.hashtags = node.hashtags.concat(this.collectHashtags(body));\n    // hashtags in the title look ugly, lets replace the gid:... structure with the tag #name\n    node.title.translation = this.replaceHashtags(title, node.hashtags);\n    node.body.translation = this.appendHtmlHashtags(this.truncate(this.removeHashtags(body)).replace(/\\n/g, \"<br>\"), node.hashtags);\n    node.link = `${this.controller.component.url}/${this.collection}/${node.id}`;\n  }\n\n  findTranslation(translations) {\n    let lang = document.querySelector(\"html\").getAttribute(\"lang\"),\n        text = \"\";\n    \n    translations.forEach((txt) => {\n      if (txt.text) {\n        if (!text || txt.locale === lang) {\n          text = txt.text\n        }\n      }\n    });\n    return text;\n  }\n\n  collectHashtags(text) {\n    let tags = [];\n    if (text) {\n      const gids = text.match(/gid:\\/\\/[^\\s<&]+/g)\n      if (gids) {\n        tags = gids.filter((gid) => gid.indexOf(\"/Decidim::Hashtag/\") !== -1).map((gid) => {\n          const parts = gid.split(\"/\");\n          const fromSelector = parts[5].charAt(0) === \"_\";\n          const tag = fromSelector ? parts[5].substr(1) : parts[5]; // eslint-disable-line no-ternary, multiline-ternary\n          const name = `#${tag}`;\n          const html = `<a href=\"/search?term=${name}\">${name}</a>`;\n          const hashtag = {\n            color: getComputedStyle(document.documentElement).getPropertyValue(\"--secondary\"),\n            gid: gid,\n            id: parseInt(parts[4], 10),\n            fromSelector: fromSelector,\n            tag: tag,\n            name: name,\n            html: html\n          }\n          this.hashtags.push(hashtag)\n          return hashtag;\n        });\n      }\n    }\n    return tags;\n  }\n\n  replaceHashtags(txt, hashtags) {\n    let text = txt;\n    hashtags.forEach((tag) => {\n      text = text.replace(tag.gid, tag.name)\n    });\n    return text;\n  }\n\n  removeHashtags(text) {\n    return text.replace(/gid:\\/\\/[^\\s<&]+/g, \"\");\n  }\n\n  appendHtmlHashtags(txt, tags) {\n    let text = txt;\n    tags.forEach((tag) => {\n      text += ` ${tag.html}`;\n    });\n    return text;\n  }\n\n  truncate(html) {\n    return $.truncate(html, this.config);\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,UAAU,MAAM,yDAAyD;AAAC,IAE5DC,OAAO;EAC1B,SAAAA,QAAYC,UAAU,EAAE;IAAAC,eAAA,OAAAF,OAAA;IACtB,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACE,MAAM,GAAG;MACZC,MAAM,EAAEH,UAAU,CAACI,UAAU,CAACF,MAAM,CAACC,MAAM,IAAI;IACjD,CAAC;IACD,IAAI,CAACE,UAAU,GAAG,YAAM,CAAC,CAAC;IAC1B,IAAI,CAACC,MAAM,GAAG,YAAM,CAAC,CAAC;IACtB,IAAI,CAACC,YAAY,GAAG,YAAM,CAAC,CAAC;IAC5B,IAAI,CAACC,QAAQ,GAAG,EAAE;IAElB,IAAI,CAACC,UAAU,GAAG,IAAI,CAACT,UAAU,CAACU,SAAS,CAACC,IAAI;IAChD;IACA,IAAI,CAACC,KAAK,8HAKN;EACN;EAAC,OAAAC,YAAA,CAAAd,OAAA;IAAAe,GAAA;IAAAC,KAAA,EAED,SAAAC,MAAA,EAAkB;MAAA,IAAAC,KAAA;MAAA,IAAZC,KAAK,GAAAC,SAAA,CAAAhB,MAAA,QAAAgB,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,EAAE;MACd,IAAME,SAAS,GAAG;QAChB,IAAI,EAAE,IAAI,CAACrB,UAAU,CAACU,SAAS,CAACY,EAAE;QAClC,OAAO,EAAEJ;MACX,CAAC;MACD,IAAMK,GAAG,GAAG,IAAIzB,UAAU,CAAC,IAAI,CAACc,KAAK,EAAES,SAAS,CAAC;MACjDE,GAAG,CAACC,QAAQ,CAAC,UAACC,MAAM,EAAK;QACvB,IAAIA,MAAM,EAAE;UACV,IAAMhB,UAAU,GAAGgB,MAAM,CAACf,SAAS,CAACO,KAAI,CAACR,UAAU,CAAC;UACpD;;UAEAA,UAAU,CAACiB,KAAK,CAACC,OAAO,CAAC,UAACC,OAAO,EAAK;YACpC,IAAIC,IAAI,GAAGD,OAAO,CAACC,IAAI;YACvB,IAAI,CAACA,IAAI,EAAE;cACT;YACF;YAEA,IAAIA,IAAI,CAACC,WAAW,IAAID,IAAI,CAACC,WAAW,CAACC,QAAQ,IAAIF,IAAI,CAACC,WAAW,CAACE,SAAS,EAAE;cAC/Ef,KAAI,CAACgB,YAAY,CAACJ,IAAI,CAAC;cACvBZ,KAAI,CAACX,MAAM,CAACuB,IAAI,CAAC;YACnB;UACF,CAAC,CAAC;UAEFZ,KAAI,CAACV,YAAY,CAACE,UAAU,CAAC;UAE7B,IAAIA,UAAU,CAACyB,QAAQ,CAACC,WAAW,EAAE;YACnClB,KAAI,CAACD,KAAK,CAACP,UAAU,CAACyB,QAAQ,CAACE,SAAS,CAAC;UAC3C,CAAC,MAAM;YACLnB,KAAI,CAACZ,UAAU,CAAC,CAAC;UACnB;QACF;MACF,CAAC,CAAC;IACJ;EAAC;IAAAS,GAAA;IAAAC,KAAA,EAED,SAAAkB,aAAaJ,IAAI,EAAE;MACjB,IAAMQ,IAAI,GAAG,IAAI,CAACC,eAAe,CAACT,IAAI,CAACQ,IAAI,CAACE,YAAY,CAAC;MACzD,IAAMC,KAAK,GAAG,IAAI,CAACF,eAAe,CAACT,IAAI,CAACW,KAAK,CAACD,YAAY,CAAC;MAC3DV,IAAI,CAACrB,QAAQ,GAAG,IAAI,CAACiC,eAAe,CAACD,KAAK,CAAC;MAC3CX,IAAI,CAACrB,QAAQ,GAAGqB,IAAI,CAACrB,QAAQ,CAACkC,MAAM,CAAC,IAAI,CAACD,eAAe,CAACJ,IAAI,CAAC,CAAC;MAChE;MACAR,IAAI,CAACW,KAAK,CAACG,WAAW,GAAG,IAAI,CAACC,eAAe,CAACJ,KAAK,EAAEX,IAAI,CAACrB,QAAQ,CAAC;MACnEqB,IAAI,CAACQ,IAAI,CAACM,WAAW,GAAG,IAAI,CAACE,kBAAkB,CAAC,IAAI,CAACC,QAAQ,CAAC,IAAI,CAACC,cAAc,CAACV,IAAI,CAAC,CAAC,CAACW,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,EAAEnB,IAAI,CAACrB,QAAQ,CAAC;MAC/HqB,IAAI,CAACoB,IAAI,MAAAP,MAAA,CAAM,IAAI,CAAC1C,UAAU,CAACU,SAAS,CAACwC,GAAG,OAAAR,MAAA,CAAI,IAAI,CAACjC,UAAU,OAAAiC,MAAA,CAAIb,IAAI,CAACP,EAAE,CAAE;IAC9E;EAAC;IAAAR,GAAA;IAAAC,KAAA,EAED,SAAAuB,gBAAgBC,YAAY,EAAE;MAC5B,IAAIY,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAC,CAACC,YAAY,CAAC,MAAM,CAAC;QAC1DC,IAAI,GAAG,EAAE;MAEbhB,YAAY,CAACZ,OAAO,CAAC,UAAC6B,GAAG,EAAK;QAC5B,IAAIA,GAAG,CAACD,IAAI,EAAE;UACZ,IAAI,CAACA,IAAI,IAAIC,GAAG,CAACC,MAAM,KAAKN,IAAI,EAAE;YAChCI,IAAI,GAAGC,GAAG,CAACD,IAAI;UACjB;QACF;MACF,CAAC,CAAC;MACF,OAAOA,IAAI;IACb;EAAC;IAAAzC,GAAA;IAAAC,KAAA,EAED,SAAA0B,gBAAgBc,IAAI,EAAE;MAAA,IAAAG,MAAA;MACpB,IAAIC,IAAI,GAAG,EAAE;MACb,IAAIJ,IAAI,EAAE;QACR,IAAMK,IAAI,GAAGL,IAAI,CAACM,KAAK,CAAC,mBAAmB,CAAC;QAC5C,IAAID,IAAI,EAAE;UACRD,IAAI,GAAGC,IAAI,CAACE,MAAM,CAAC,UAACC,GAAG;YAAA,OAAKA,GAAG,CAACC,OAAO,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;UAAA,EAAC,CAACC,GAAG,CAAC,UAACF,GAAG,EAAK;YACjF,IAAMG,KAAK,GAAGH,GAAG,CAACI,KAAK,CAAC,GAAG,CAAC;YAC5B,IAAMC,YAAY,GAAGF,KAAK,CAAC,CAAC,CAAC,CAACG,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG;YAC/C,IAAMC,GAAG,GAAGF,YAAY,GAAGF,KAAK,CAAC,CAAC,CAAC,CAACK,MAAM,CAAC,CAAC,CAAC,GAAGL,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1D,IAAMM,IAAI,OAAA9B,MAAA,CAAO4B,GAAG,CAAE;YACtB,IAAMG,IAAI,6BAAA/B,MAAA,CAA4B8B,IAAI,SAAA9B,MAAA,CAAK8B,IAAI,SAAM;YACzD,IAAME,OAAO,GAAG;cACdC,KAAK,EAAEC,gBAAgB,CAACxB,QAAQ,CAACyB,eAAe,CAAC,CAACC,gBAAgB,CAAC,aAAa,CAAC;cACjFf,GAAG,EAAEA,GAAG;cACRzC,EAAE,EAAEyD,QAAQ,CAACb,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;cAC1BE,YAAY,EAAEA,YAAY;cAC1BE,GAAG,EAAEA,GAAG;cACRE,IAAI,EAAEA,IAAI;cACVC,IAAI,EAAEA;YACR,CAAC;YACDf,MAAI,CAAClD,QAAQ,CAACwE,IAAI,CAACN,OAAO,CAAC;YAC3B,OAAOA,OAAO;UAChB,CAAC,CAAC;QACJ;MACF;MACA,OAAOf,IAAI;IACb;EAAC;IAAA7C,GAAA;IAAAC,KAAA,EAED,SAAA6B,gBAAgBY,GAAG,EAAEhD,QAAQ,EAAE;MAC7B,IAAI+C,IAAI,GAAGC,GAAG;MACdhD,QAAQ,CAACmB,OAAO,CAAC,UAAC2C,GAAG,EAAK;QACxBf,IAAI,GAAGA,IAAI,CAACP,OAAO,CAACsB,GAAG,CAACP,GAAG,EAAEO,GAAG,CAACE,IAAI,CAAC;MACxC,CAAC,CAAC;MACF,OAAOjB,IAAI;IACb;EAAC;IAAAzC,GAAA;IAAAC,KAAA,EAED,SAAAgC,eAAeQ,IAAI,EAAE;MACnB,OAAOA,IAAI,CAACP,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC;IAC9C;EAAC;IAAAlC,GAAA;IAAAC,KAAA,EAED,SAAA8B,mBAAmBW,GAAG,EAAEG,IAAI,EAAE;MAC5B,IAAIJ,IAAI,GAAGC,GAAG;MACdG,IAAI,CAAChC,OAAO,CAAC,UAAC2C,GAAG,EAAK;QACpBf,IAAI,QAAAb,MAAA,CAAQ4B,GAAG,CAACG,IAAI,CAAE;MACxB,CAAC,CAAC;MACF,OAAOlB,IAAI;IACb;EAAC;IAAAzC,GAAA;IAAAC,KAAA,EAED,SAAA+B,SAAS2B,IAAI,EAAE;MACb,OAAOQ,CAAC,CAACnC,QAAQ,CAAC2B,IAAI,EAAE,IAAI,CAACvE,MAAM,CAAC;IACtC;EAAC;AAAA;AAAA,SAlIkBH,OAAO,IAAAmF,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}