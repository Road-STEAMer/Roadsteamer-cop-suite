{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\n/* eslint-disable require-jsdoc */\n\nimport lineBreakButtonHandler from \"src/decidim/editor/linebreak_module\";\nimport \"src/decidim/editor/clipboard_override\";\nimport \"src/decidim/vendor/image-resize.min\";\nimport \"src/decidim/vendor/image-upload.min\";\nvar quillFormats = [\"bold\", \"italic\", \"link\", \"underline\", \"header\", \"list\", \"video\", \"image\", \"alt\", \"break\", \"width\", \"style\", \"code\", \"blockquote\", \"indent\"];\nexport default function createQuillEditor(container) {\n  var toolbar = $(container).data(\"toolbar\");\n  var disabled = $(container).data(\"disabled\");\n  var allowedEmptyContentSelector = \"iframe\";\n  var quillToolbar = [[\"bold\", \"italic\", \"underline\", \"linebreak\"], [{\n    list: \"ordered\"\n  }, {\n    list: \"bullet\"\n  }], [\"link\", \"clean\"], [\"code\", \"blockquote\"], [{\n    \"indent\": \"-1\"\n  }, {\n    \"indent\": \"+1\"\n  }], [{\n    'savedDataset': \"openModal\"\n  }]];\n  var addImage = $(container).data(\"editorImages\");\n  if (toolbar === \"full\") {\n    quillToolbar = [[{\n      header: [2, 3, 4, 5, 6, false]\n    }]].concat(_toConsumableArray(quillToolbar), [[\"video\"]]);\n  } else if (toolbar === \"basic\") {\n    quillToolbar = [].concat(_toConsumableArray(quillToolbar), [[\"video\"]]);\n  }\n\n  // let modalData = [];\n  // let hasFetched = false; // Add this flag\n\n  // // Function to fetch data\n  // function fetchData() {\n  //   if (!hasFetched) { // Check if fetch hasn't been performed yet\n  //     fetch('/idra_modal_editor', {\n  //       method: 'GET'\n  //     })\n  //       .then(response => {\n  //         if (response.ok) {\n  //           return response.text(); // Assuming the response is HTML\n  //         } else {\n  //           throw new Error('Failed to fetch the updated content');\n  //         }\n  //       })\n  //       .then(data => {\n  //         const parser = new DOMParser();\n  //         const doc = parser.parseFromString(data, 'text/html');\n  //         const datasetElements = doc.querySelectorAll('#datasets-list a');\n  //         const urlElements = doc.querySelectorAll('#datasets-list #url');\n\n  //         datasetElements.forEach((dataset, index) => {\n  //           const title = dataset.textContent;\n  //           const url = urlElements[index].textContent;\n  //           modalData.push({ title, url });\n  //         });\n  //       })\n  //       .catch(error => {\n  //         console.error('Error updating partial view:', error);\n  //       });\n\n  //     hasFetched = true; // Set the flag to indicate that fetch has been performed\n  //   }\n  // }\n\n  // Function to create and display the modal\n  function openModal() {\n    // Fetch the partial view content using AJAX\n    fetch('/idra_modal_editor').then(function (response) {\n      return response.text();\n    }).then(function (html) {\n      // Create the modal container\n      var modalContainer = document.createElement('div');\n      modalContainer.classList.add('modal-container');\n      modalContainer.innerHTML = html; // Insert the partial view's HTML\n\n      // ... (rest of your modal logic, including appending to body, \n      //     adding event listeners, etc. remains the same)\n    })[\"catch\"](function (error) {\n      console.error('Error fetching partial view:', error);\n      // Handle the error appropriately\n    });\n\n    // Call the fetchData function\n    //   // Create a modal container\n    //   var modalContainer = document.createElement('div');\n    //   modalContainer.classList.add('modal-container');\n\n    //   // Create a modal element\n    //   var modal = document.createElement('div');\n    //   modal.classList.add('modal');\n\n    //   // Modal content\n    //   var modalContent = document.createElement('div');\n    //   modalContent.classList.add('modal-content');\n    //   modalContent.id = 'modalContent';\n\n    //   // Create an unordered list to display the elements as a list\n    //   // Create a div for the links\n    //   var linksDiv = document.createElement('div');\n    //   linksDiv.classList.add('links-column');\n\n    //   var titleElement = document.createElement('h1');\n    //   titleElement.textContent = \"Saved Dataset\";\n    //   linksDiv.appendChild(titleElement);\n    //   titleElement.className = \"text-center\"\n\n    //   var descriptionElement = document.createElement(\"h5\")\n    //   descriptionElement.textContent = \"Select a dataset to insert in text editor:\"\n    //   descriptionElement.style.color = \"gray\"\n    //   linksDiv.appendChild(descriptionElement)\n\n    //   // Loop through modalData array and create links with click event listeners\n    //   modalData.forEach(function (element) {\n    //     var link = document.createElement('a');\n    //     link.href = element.url; // URL as the href attribute of the link\n    //     link.textContent = element.title; // Title as the visible text of the link\n    //     linksDiv.appendChild(link);\n\n    //     link.addEventListener('click', function (event) {\n    //       event.preventDefault(); // Prevent default navigation behavior\n\n    //       copyAndPasteText(element.title, element.url);\n    //       modalContainer.style.display = 'none'; // Close the modal\n    //     });\n\n    //     if (element !== modalData[modalData.length - 1]) {\n    //       linksDiv.appendChild(document.createElement('br'));\n    //     }\n    //   });\n\n    //   // Function to copy and paste the text into the Quill editor\n    //    function copyAndPasteText(title, url) {\n    //   const range = quill.getSelection();\n\n    //   const linkFormat = {\n    //     link: url,\n    //     target: '_blank',\n    //   };\n\n    //   quill.insertText(range.index, title, linkFormat);\n    //   quill.setSelection(range.index, title.length, 'user');\n    // }\n    //   modalContent.appendChild(linksDiv);\n    //   modal.appendChild(modalContent);\n    //   modalContainer.appendChild(modal);\n    //   document.body.appendChild(modalContainer);\n\n    //   // Open the modal\n    //   modalContainer.style.display = 'block';\n\n    //   // Close modal when clicking outside the modal\n    //   window.addEventListener('click', function (event) {\n    //     if (event.target == modalContainer) {\n    //       modalContainer.style.display = 'none';\n    //     }\n    //   });\n  }\n\n  var modules = {\n    linebreak: {},\n    toolbar: {\n      container: quillToolbar,\n      handlers: {\n        \"linebreak\": lineBreakButtonHandler,\n        \"savedDataset\": openModal\n      }\n    }\n  };\n  var $input = $(container).siblings('input[type=\"hidden\"]');\n  container.innerHTML = $input.val() || \"\";\n  var token = $('meta[name=\"csrf-token\"]').attr(\"content\");\n  if (addImage) {\n    modules.imageResize = {\n      modules: [\"Resize\", \"DisplaySize\"]\n    };\n    modules.imageUpload = {\n      url: $(container).data(\"uploadImagesPath\"),\n      method: \"POST\",\n      name: \"image\",\n      withCredentials: false,\n      headers: {\n        \"X-CSRF-Token\": token\n      },\n      callbackOK: function callbackOK(serverResponse, next) {\n        $(\"div.ql-toolbar\").last().removeClass(\"editor-loading\");\n        next(serverResponse.url);\n      },\n      callbackKO: function callbackKO(serverError) {\n        $(\"div.ql-toolbar\").last().removeClass(\"editor-loading\");\n        console.log(\"Image upload error: \".concat(serverError.message));\n      },\n      checkBeforeSend: function checkBeforeSend(file, next) {\n        $(\"div.ql-toolbar\").last().addClass(\"editor-loading\");\n        next(file);\n      }\n    };\n  }\n  var quill = new Quill(container, {\n    modules: modules,\n    formats: quillFormats,\n    theme: \"snow\"\n  });\n  if (disabled) {\n    quill.disable();\n  }\n  quill.on(\"text-change\", function () {\n    var text = quill.getText();\n\n    // Triggers CustomEvent with the cursor position\n    // It is required in input_mentions.js\n    var event = new CustomEvent(\"quill-position\", {\n      detail: quill.getSelection()\n    });\n    container.dispatchEvent(event);\n    if ((text === \"\\n\" || text === \"\\n\\n\") && quill.root.querySelectorAll(allowedEmptyContentSelector).length === 0) {\n      $input.val(\"\");\n    } else {\n      var emptyParagraph = \"<p><br></p>\";\n      var cleanHTML = quill.root.innerHTML.replace(new RegExp(\"^\".concat(emptyParagraph, \"|\").concat(emptyParagraph, \"$\"), \"g\"), \"\");\n      $input.val(cleanHTML);\n    }\n  });\n  // After editor is ready, linebreak_module deletes two extraneous new lines\n  quill.emitter.emit(\"editor-ready\");\n  if (addImage) {\n    var text = $(container).data(\"dragAndDropHelpText\");\n    $(container).after(\"<p class=\\\"help-text\\\" style=\\\"margin-top:-1.5rem;\\\">\".concat(text, \"</p>\"));\n  }\n\n  // After editor is ready, linebreak_module deletes two extraneous new lines\n  quill.emitter.emit(\"editor-ready\");\n  return quill;\n}","map":{"version":3,"names":["lineBreakButtonHandler","quillFormats","createQuillEditor","container","toolbar","$","data","disabled","allowedEmptyContentSelector","quillToolbar","list","addImage","header","concat","_toConsumableArray","openModal","fetch","then","response","text","html","modalContainer","document","createElement","classList","add","innerHTML","error","console","modules","linebreak","handlers","$input","siblings","val","token","attr","imageResize","imageUpload","url","method","name","withCredentials","headers","callbackOK","serverResponse","next","last","removeClass","callbackKO","serverError","log","message","checkBeforeSend","file","addClass","quill","Quill","formats","theme","disable","on","getText","event","CustomEvent","detail","getSelection","dispatchEvent","root","querySelectorAll","length","emptyParagraph","cleanHTML","replace","RegExp","emitter","emit","after"],"sources":["/home/daniele/decidim_idra/app/packs/src/decidim/editor.js"],"sourcesContent":["/* eslint-disable require-jsdoc */\n\nimport lineBreakButtonHandler from \"src/decidim/editor/linebreak_module\"\nimport \"src/decidim/editor/clipboard_override\"\nimport \"src/decidim/vendor/image-resize.min\"\nimport \"src/decidim/vendor/image-upload.min\"\n\nconst quillFormats = [\"bold\", \"italic\", \"link\", \"underline\", \"header\", \"list\", \"video\", \"image\", \"alt\", \"break\", \"width\", \"style\", \"code\", \"blockquote\", \"indent\"];\n\nexport default function createQuillEditor(container) {\n  const toolbar = $(container).data(\"toolbar\");\n  const disabled = $(container).data(\"disabled\");\n\n  const allowedEmptyContentSelector = \"iframe\";\n  let quillToolbar = [\n    [\"bold\", \"italic\", \"underline\", \"linebreak\",],\n    [{ list: \"ordered\" }, { list: \"bullet\" }],\n    [\"link\", \"clean\"],\n    [\"code\", \"blockquote\"],\n    [{ \"indent\": \"-1\" }, { \"indent\": \"+1\" }],\n    [{ 'savedDataset': \"openModal\" }]\n  ]\n\n  let addImage = $(container).data(\"editorImages\");\n\n  if (toolbar === \"full\") {\n    quillToolbar = [\n      [{ header: [2, 3, 4, 5, 6, false] }],\n      ...quillToolbar,\n      [\"video\"]\n    ];\n  } else if (toolbar === \"basic\") {\n    quillToolbar = [\n      ...quillToolbar,\n      [\"video\"]\n    ];\n  }\n\n\n  // let modalData = [];\n  // let hasFetched = false; // Add this flag\n\n  // // Function to fetch data\n  // function fetchData() {\n  //   if (!hasFetched) { // Check if fetch hasn't been performed yet\n  //     fetch('/idra_modal_editor', {\n  //       method: 'GET'\n  //     })\n  //       .then(response => {\n  //         if (response.ok) {\n  //           return response.text(); // Assuming the response is HTML\n  //         } else {\n  //           throw new Error('Failed to fetch the updated content');\n  //         }\n  //       })\n  //       .then(data => {\n  //         const parser = new DOMParser();\n  //         const doc = parser.parseFromString(data, 'text/html');\n  //         const datasetElements = doc.querySelectorAll('#datasets-list a');\n  //         const urlElements = doc.querySelectorAll('#datasets-list #url');\n  \n  //         datasetElements.forEach((dataset, index) => {\n  //           const title = dataset.textContent;\n  //           const url = urlElements[index].textContent;\n  //           modalData.push({ title, url });\n  //         });\n  //       })\n  //       .catch(error => {\n  //         console.error('Error updating partial view:', error);\n  //       });\n  \n  //     hasFetched = true; // Set the flag to indicate that fetch has been performed\n  //   }\n  // }\n\n\n\n\n  // Function to create and display the modal\n  function openModal() {\n\n      // Fetch the partial view content using AJAX\n      fetch('/idra_modal_editor') \n        .then(response => response.text())\n        .then(html => {\n          // Create the modal container\n          const modalContainer = document.createElement('div');\n          modalContainer.classList.add('modal-container');\n          modalContainer.innerHTML = html; // Insert the partial view's HTML\n    \n          // ... (rest of your modal logic, including appending to body, \n          //     adding event listeners, etc. remains the same)\n        })\n        .catch(error => {\n          console.error('Error fetching partial view:', error);\n          // Handle the error appropriately\n        });\n\n\n\n     // Call the fetchData function\n  //   // Create a modal container\n  //   var modalContainer = document.createElement('div');\n  //   modalContainer.classList.add('modal-container');\n\n  //   // Create a modal element\n  //   var modal = document.createElement('div');\n  //   modal.classList.add('modal');\n\n  //   // Modal content\n  //   var modalContent = document.createElement('div');\n  //   modalContent.classList.add('modal-content');\n  //   modalContent.id = 'modalContent';\n\n  //   // Create an unordered list to display the elements as a list\n  //   // Create a div for the links\n  //   var linksDiv = document.createElement('div');\n  //   linksDiv.classList.add('links-column');\n\n  //   var titleElement = document.createElement('h1');\n  //   titleElement.textContent = \"Saved Dataset\";\n  //   linksDiv.appendChild(titleElement);\n  //   titleElement.className = \"text-center\"\n\n\n  //   var descriptionElement = document.createElement(\"h5\")\n  //   descriptionElement.textContent = \"Select a dataset to insert in text editor:\"\n  //   descriptionElement.style.color = \"gray\"\n  //   linksDiv.appendChild(descriptionElement)\n\n\n  //   // Loop through modalData array and create links with click event listeners\n  //   modalData.forEach(function (element) {\n  //     var link = document.createElement('a');\n  //     link.href = element.url; // URL as the href attribute of the link\n  //     link.textContent = element.title; // Title as the visible text of the link\n  //     linksDiv.appendChild(link);\n      \n  \n  //     link.addEventListener('click', function (event) {\n  //       event.preventDefault(); // Prevent default navigation behavior\n  \n  //       copyAndPasteText(element.title, element.url);\n  //       modalContainer.style.display = 'none'; // Close the modal\n  //     });\n    \n  \n  //     if (element !== modalData[modalData.length - 1]) {\n  //       linksDiv.appendChild(document.createElement('br'));\n  //     }\n  //   });\n\n\n  //   // Function to copy and paste the text into the Quill editor\n  //    function copyAndPasteText(title, url) {\n  //   const range = quill.getSelection();\n\n  //   const linkFormat = {\n  //     link: url,\n  //     target: '_blank',\n  //   };\n\n  //   quill.insertText(range.index, title, linkFormat);\n  //   quill.setSelection(range.index, title.length, 'user');\n  // }\n  //   modalContent.appendChild(linksDiv);\n  //   modal.appendChild(modalContent);\n  //   modalContainer.appendChild(modal);\n  //   document.body.appendChild(modalContainer);\n\n  //   // Open the modal\n  //   modalContainer.style.display = 'block';\n\n  //   // Close modal when clicking outside the modal\n  //   window.addEventListener('click', function (event) {\n  //     if (event.target == modalContainer) {\n  //       modalContainer.style.display = 'none';\n  //     }\n  //   });\n  }\n\n\n  let modules = {\n    linebreak: {},\n    toolbar: {\n      container: quillToolbar,\n      handlers: {\n        \"linebreak\": lineBreakButtonHandler,\n        \"savedDataset\": openModal,\n      }\n    }\n  };\n\n  \n\n\n  const $input = $(container).siblings('input[type=\"hidden\"]');\n  container.innerHTML = $input.val() || \"\";\n  const token = $('meta[name=\"csrf-token\"]').attr(\"content\");\n  if (addImage) {\n    modules.imageResize = {\n      modules: [\"Resize\", \"DisplaySize\"]\n    }\n    modules.imageUpload = {\n      url: $(container).data(\"uploadImagesPath\"),\n      method: \"POST\",\n      name: \"image\",\n      withCredentials: false,\n      headers: { \"X-CSRF-Token\": token },\n      callbackOK: (serverResponse, next) => {\n        $(\"div.ql-toolbar\").last().removeClass(\"editor-loading\")\n        next(serverResponse.url);\n      },\n      callbackKO: (serverError) => {\n        $(\"div.ql-toolbar\").last().removeClass(\"editor-loading\")\n        console.log(`Image upload error: ${serverError.message}`);\n      },\n      checkBeforeSend: (file, next) => {\n        $(\"div.ql-toolbar\").last().addClass(\"editor-loading\")\n        next(file);\n      }\n    }\n  }\n  const quill = new Quill(container, {\n    modules: modules,\n    formats: quillFormats,\n    theme: \"snow\"\n  });\n\n\n\n  if (disabled) {\n    quill.disable();\n  }\n\n  quill.on(\"text-change\", () => {\n    const text = quill.getText();\n\n    // Triggers CustomEvent with the cursor position\n    // It is required in input_mentions.js\n    let event = new CustomEvent(\"quill-position\", {\n      detail: quill.getSelection()\n    });\n    container.dispatchEvent(event);\n\n    if ((text === \"\\n\" || text === \"\\n\\n\") && quill.root.querySelectorAll(allowedEmptyContentSelector).length === 0) {\n      $input.val(\"\");\n    } else {\n      const emptyParagraph = \"<p><br></p>\";\n      const cleanHTML = quill.root.innerHTML.replace(\n        new RegExp(`^${emptyParagraph}|${emptyParagraph}$`, \"g\"),\n        \"\"\n      );\n      $input.val(cleanHTML);\n    }\n  });\n  // After editor is ready, linebreak_module deletes two extraneous new lines\n  quill.emitter.emit(\"editor-ready\");\n\n  if (addImage) {\n    const text = $(container).data(\"dragAndDropHelpText\");\n    $(container).after(`<p class=\"help-text\" style=\"margin-top:-1.5rem;\">${text}</p>`);\n  }\n\n  // After editor is ready, linebreak_module deletes two extraneous new lines\n  quill.emitter.emit(\"editor-ready\");\n\n  return quill;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}