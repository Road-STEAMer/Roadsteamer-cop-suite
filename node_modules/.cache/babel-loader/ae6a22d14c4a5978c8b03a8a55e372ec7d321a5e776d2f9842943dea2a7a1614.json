{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nimport { Extension } from \"@tiptap/core\";\n\n// The node types for which indentation is allowed\nvar allowedNodeTypes = [\"heading\", \"paragraph\"];\n\n/**\n * Helper method to check whether one of the allowed type nodes is currently\n * active where the indentation can be performed on.\n *\n * @param {Object} editor The editor instance.\n * @returns {Boolean} A boolean indicating if an allowed type node is active\n */\nvar allowedNodeActive = function allowedNodeActive(editor) {\n  return allowedNodeTypes.some(function (type) {\n    return editor.isActive(type);\n  });\n};\n\n/**\n * Finds the closest allowed type node from the given position. Traversese the\n * document depth upwards to search through all the node parents.\n *\n * @param {Object} position The position where to look for\n * @returns {Node|null} The allowed node or null if no allowed node is found\n */\nvar closestAllowedNode = function closestAllowedNode(position) {\n  var depth = position.depth;\n  var _loop = function _loop() {\n    var node = position.node(depth);\n    if (allowedNodeTypes.some(function (type) {\n      return node.type.name === type;\n    })) {\n      return {\n        v: node\n      };\n    }\n    depth -= 1;\n  };\n  while (depth > 0) {\n    var _ret = _loop();\n    if (_typeof(_ret) === \"object\") return _ret.v;\n  }\n  return null;\n};\n\n/**\n * Indent extension for the Tiptap editor.\n *\n * Originally based on the following MIT licensed code:\n * https://github.com/ueberdosis/tiptap/issues/1036#issuecomment-1000983233\n * https://github.com/evanfuture/tiptaptop-extension-indent\n *\n * License as specified at:\n * https://github.com/evanfuture/tiptaptop-extension-indent\n *\n * The code has been simplified and modified to fit better the needs of Decidim.\n *\n * Authors/Credits: Jeet Mandaliya (@sereneinserenade),\n *   Evan Payne (@evanfuture), @danline, YukiYama (@yuyuyukie)\n */\nexport default Extension.create({\n  name: \"indent\",\n  addOptions: function addOptions() {\n    return {\n      minIndentLevel: 0,\n      maxIndentLevel: 10,\n      HTMLAttributes: {}\n    };\n  },\n  addGlobalAttributes: function addGlobalAttributes() {\n    var defaultIndentLevel = 0;\n    return [{\n      types: allowedNodeTypes,\n      attributes: {\n        indent: {\n          \"default\": defaultIndentLevel,\n          renderHTML: function renderHTML(attributes) {\n            if (attributes.indent < 1) {\n              return {};\n            }\n            return {\n              \"class\": \"editor-indent-\".concat(attributes.indent)\n            };\n          },\n          parseHTML: function parseHTML(element) {\n            // The \"ql\" prefix here is to maintain backwards compatibility\n            // with the old editor. The new prefix is editor-indent-X where X\n            // is the current indentation level.\n            var regexp = /^(editor|ql)-indent-([0-9]+)/;\n            var indentClass = Array.from(element.classList).find(function (cls) {\n              return regexp.test(cls);\n            });\n            if (!indentClass) {\n              return defaultIndentLevel;\n            }\n            return parseInt(indentClass.match(regexp)[2], 10);\n          }\n        }\n      }\n    }];\n  },\n  addCommands: function addCommands() {\n    var _this = this;\n    var updateIndent = function updateIndent(modifier, _ref) {\n      var editor = _ref.editor,\n        state = _ref.state,\n        dispatch = _ref.dispatch,\n        commands = _ref.commands;\n      if (!allowedNodeActive(editor)) {\n        return false;\n      }\n      var node = closestAllowedNode(state.selection.$head);\n      if (node === null) {\n        return false;\n      }\n      var indent = node.attrs.indent + modifier;\n      if (indent < _this.options.minIndentLevel || indent > _this.options.maxIndentLevel) {\n        return false;\n      }\n      if (dispatch) {\n        return commands.updateAttributes(node.type.name, {\n          indent: indent\n        });\n      }\n      return true;\n    };\n    return {\n      indent: function indent() {\n        return function (_ref2) {\n          var editor = _ref2.editor,\n            state = _ref2.state,\n            commands = _ref2.commands,\n            dispatch = _ref2.dispatch;\n          if (editor.isActive(\"listItem\")) {\n            if (dispatch) {\n              return commands.sinkListItem(\"listItem\");\n            }\n            return true;\n          }\n          return updateIndent(1, {\n            editor: editor,\n            state: state,\n            dispatch: dispatch,\n            commands: commands\n          });\n        };\n      },\n      outdent: function outdent() {\n        return function (_ref3) {\n          var editor = _ref3.editor,\n            state = _ref3.state,\n            commands = _ref3.commands,\n            dispatch = _ref3.dispatch;\n          if (editor.isActive(\"listItem\")) {\n            // When the list item depth is at 3 it means that the list is at the\n            // top level because of the following structure:\n            // <ul><!-- depth: 1 -->\n            //   <li><!-- depth: 2 -->\n            //     <p>Content</p><!-- depth: 3 -->\n            //   </li>\n            // </ul>\n            //\n            // We do not allow outdent at the top level of the list.\n            if (state.selection.$head.depth === 3) {\n              return false;\n            }\n            if (dispatch) {\n              return commands.liftListItem(\"listItem\");\n            }\n            return true;\n          }\n          return updateIndent(-1, {\n            editor: editor,\n            state: state,\n            dispatch: dispatch,\n            commands: commands\n          });\n        };\n      }\n    };\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this2 = this;\n    var indent = function indent() {\n      if (!_this2.editor.can().indent()) {\n        return false;\n      }\n      return _this2.editor.commands.indent();\n    };\n    var outdent = function outdent() {\n      if (!_this2.editor.can().outdent()) {\n        return false;\n      }\n      return _this2.editor.commands.outdent();\n    };\n    return {\n      Tab: indent,\n      \"Shift-Tab\": outdent,\n      Backspace: function Backspace() {\n        if (_this2.editor.isActive(\"listItem\")) {\n          return false;\n        }\n\n        // With the backspace we only allow outdent when the cursor is at the\n        // beginning of the line.\n        if (_this2.editor.state.selection.$head.parentOffset > 0) {\n          return false;\n        }\n        return outdent();\n      },\n      \"Mod-]\": indent,\n      \"Mod-[\": outdent\n    };\n  }\n});","map":{"version":3,"names":["Extension","allowedNodeTypes","allowedNodeActive","editor","some","type","isActive","closestAllowedNode","position","depth","_loop","node","name","v","_ret","_typeof","create","addOptions","minIndentLevel","maxIndentLevel","HTMLAttributes","addGlobalAttributes","defaultIndentLevel","types","attributes","indent","renderHTML","concat","parseHTML","element","regexp","indentClass","Array","from","classList","find","cls","test","parseInt","match","addCommands","_this","updateIndent","modifier","_ref","state","dispatch","commands","selection","$head","attrs","options","updateAttributes","_ref2","sinkListItem","outdent","_ref3","liftListItem","addKeyboardShortcuts","_this2","can","Tab","Backspace","parentOffset"],"sources":["/home/daniele/decidim_idra-main/app/packs/src/decidim/editor/extensions/indent/index.js"],"sourcesContent":["import { Extension } from \"@tiptap/core\";\n\n// The node types for which indentation is allowed\nconst allowedNodeTypes = [\"heading\", \"paragraph\"];\n\n/**\n * Helper method to check whether one of the allowed type nodes is currently\n * active where the indentation can be performed on.\n *\n * @param {Object} editor The editor instance.\n * @returns {Boolean} A boolean indicating if an allowed type node is active\n */\nconst allowedNodeActive = (editor) => allowedNodeTypes.some((type) => editor.isActive(type));\n\n/**\n * Finds the closest allowed type node from the given position. Traversese the\n * document depth upwards to search through all the node parents.\n *\n * @param {Object} position The position where to look for\n * @returns {Node|null} The allowed node or null if no allowed node is found\n */\nconst closestAllowedNode = (position) => {\n  let depth = position.depth;\n  while (depth > 0) {\n    const node = position.node(depth);\n    if (allowedNodeTypes.some((type) => node.type.name === type)) {\n      return node;\n    }\n    depth -= 1;\n  }\n  return null;\n}\n\n/**\n * Indent extension for the Tiptap editor.\n *\n * Originally based on the following MIT licensed code:\n * https://github.com/ueberdosis/tiptap/issues/1036#issuecomment-1000983233\n * https://github.com/evanfuture/tiptaptop-extension-indent\n *\n * License as specified at:\n * https://github.com/evanfuture/tiptaptop-extension-indent\n *\n * The code has been simplified and modified to fit better the needs of Decidim.\n *\n * Authors/Credits: Jeet Mandaliya (@sereneinserenade),\n *   Evan Payne (@evanfuture), @danline, YukiYama (@yuyuyukie)\n */\nexport default Extension.create({\n  name: \"indent\",\n\n  addOptions() {\n    return {\n      minIndentLevel: 0,\n      maxIndentLevel: 10,\n      HTMLAttributes: {}\n    };\n  },\n\n  addGlobalAttributes() {\n    const defaultIndentLevel = 0;\n\n    return [\n      {\n        types: allowedNodeTypes,\n        attributes: {\n          indent: {\n            default: defaultIndentLevel,\n            renderHTML: (attributes) => {\n              if (attributes.indent < 1) {\n                return {};\n              }\n\n              return { class: `editor-indent-${attributes.indent}` };\n            },\n            parseHTML: (element) => {\n              // The \"ql\" prefix here is to maintain backwards compatibility\n              // with the old editor. The new prefix is editor-indent-X where X\n              // is the current indentation level.\n              const regexp = /^(editor|ql)-indent-([0-9]+)/;\n              const indentClass = Array.from(element.classList).find((cls) => regexp.test(cls))\n              if (!indentClass) {\n                return defaultIndentLevel;\n              }\n              return parseInt(indentClass.match(regexp)[2], 10);\n            }\n          }\n        }\n      }\n    ];\n  },\n\n  addCommands() {\n    const updateIndent = (modifier, { editor, state, dispatch, commands }) => {\n      if (!allowedNodeActive(editor)) {\n        return false;\n      }\n\n      const node = closestAllowedNode(state.selection.$head);\n      if (node === null) {\n        return false;\n      }\n\n      const indent = node.attrs.indent + modifier;\n      if (indent < this.options.minIndentLevel || indent > this.options.maxIndentLevel) {\n        return false;\n      }\n\n      if (dispatch) {\n        return commands.updateAttributes(node.type.name, { indent });\n      }\n\n      return true;\n    }\n\n    return {\n      indent: () => ({ editor, state, commands, dispatch }) => {\n        if (editor.isActive(\"listItem\")) {\n          if (dispatch) {\n            return commands.sinkListItem(\"listItem\");\n          }\n          return true;\n        }\n\n        return updateIndent(1, { editor, state, dispatch, commands})\n      },\n      outdent: () => ({ editor, state, commands, dispatch }) => {\n        if (editor.isActive(\"listItem\")) {\n          // When the list item depth is at 3 it means that the list is at the\n          // top level because of the following structure:\n          // <ul><!-- depth: 1 -->\n          //   <li><!-- depth: 2 -->\n          //     <p>Content</p><!-- depth: 3 -->\n          //   </li>\n          // </ul>\n          //\n          // We do not allow outdent at the top level of the list.\n          if (state.selection.$head.depth === 3) {\n            return false;\n          }\n          if (dispatch) {\n            return commands.liftListItem(\"listItem\");\n          }\n          return true;\n        }\n\n        return updateIndent(-1, { editor, state, dispatch, commands})\n      }\n    }\n  },\n\n  addKeyboardShortcuts() {\n    const indent = () => {\n      if (!this.editor.can().indent()) {\n        return false;\n      }\n\n      return this.editor.commands.indent();\n    };\n    const outdent = () => {\n      if (!this.editor.can().outdent()) {\n        return false;\n      }\n\n      return this.editor.commands.outdent();\n    };\n\n    return {\n      Tab: indent,\n      \"Shift-Tab\": outdent,\n      Backspace: () => {\n        if (this.editor.isActive(\"listItem\")) {\n          return false;\n        }\n\n        // With the backspace we only allow outdent when the cursor is at the\n        // beginning of the line.\n        if (this.editor.state.selection.$head.parentOffset > 0) {\n          return false;\n        }\n\n        return outdent();\n      },\n      \"Mod-]\": indent,\n      \"Mod-[\": outdent\n    };\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}