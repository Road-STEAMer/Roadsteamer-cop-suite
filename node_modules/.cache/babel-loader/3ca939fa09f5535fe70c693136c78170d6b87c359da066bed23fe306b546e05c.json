{"ast":null,"code":"// From https://github.com/pathable/truncate/\n\n(function ($) {\n  // Matches trailing non-space characters.\n  var chop = /(\\s*\\S+|\\s)$/;\n\n  // Matches the first word in the string.\n  var start = /^(\\S*)/;\n\n  // Return a truncated html string.  Delegates to $.fn.truncate.\n  $.truncate = function (html, options) {\n    return $('<div></div>').append(html).truncate(options).html();\n  };\n\n  // Truncate the contents of an element in place.\n  $.fn.truncate = function (options) {\n    if ($.isNumeric(options)) options = {\n      length: options\n    };\n    var o = $.extend({}, $.truncate.defaults, options);\n    return this.each(function () {\n      var self = $(this);\n      if (o.noBreaks) self.find('br').replaceWith(' ');\n      var text = self.text();\n      var excess = text.length - o.length;\n      if (o.stripTags) self.text(text);\n\n      // Chop off any partial words if appropriate.\n      if (o.words && excess > 0) {\n        var truncated = text.slice(0, o.length).replace(chop, '').length;\n        if (o.keepFirstWord && truncated === 0) {\n          excess = text.length - start.exec(text)[0].length - 1;\n        } else {\n          excess = text.length - truncated - 1;\n        }\n      }\n      if (excess < 0 || !excess && !o.truncated) return;\n\n      // Iterate over each child node in reverse, removing excess text.\n      $.each(self.contents().get().reverse(), function (i, el) {\n        var $el = $(el);\n        var text = $el.text();\n        var length = text.length;\n\n        // If the text is longer than the excess, remove the node and continue.\n        if (length <= excess) {\n          o.truncated = true;\n          excess -= length;\n          $el.remove();\n          return;\n        }\n\n        // Remove the excess text and append the ellipsis.\n        if (el.nodeType === 3) {\n          // should we finish the block anyway?\n          if (o.finishBlock) {\n            $(el.splitText(length)).replaceWith(o.ellipsis);\n          } else {\n            $(el.splitText(length - excess - 1)).replaceWith(o.ellipsis);\n          }\n          return false;\n        }\n\n        // Recursively truncate child nodes.\n        $el.truncate($.extend(o, {\n          length: length - excess\n        }));\n        return false;\n      });\n    });\n  };\n  $.truncate.defaults = {\n    // Strip all html elements, leaving only plain text.\n    stripTags: false,\n    // Only truncate at word boundaries.\n    words: false,\n    // When 'words' is active, keeps the first word in the string\n    // even if it's longer than a target length.\n    keepFirstWord: false,\n    // Replace instances of <br> with a single space.\n    noBreaks: false,\n    // if true always truncate the content at the end of the block.\n    finishBlock: false,\n    // The maximum length of the truncated html.\n    length: Infinity,\n    // The character to use as the ellipsis.  The word joiner (U+2060) can be\n    // used to prevent a hanging ellipsis, but displays incorrectly in Chrome\n    // on Windows 7.\n    // http://code.google.com/p/chromium/issues/detail?id=68323\n    ellipsis: \"\\u2026\" // '\\u2060\\u2026'\n  };\n})(jQuery);","map":{"version":3,"names":["$","chop","start","truncate","html","options","append","fn","isNumeric","length","o","extend","defaults","each","self","noBreaks","find","replaceWith","text","excess","stripTags","words","truncated","slice","replace","keepFirstWord","exec","contents","get","reverse","i","el","$el","remove","nodeType","finishBlock","splitText","ellipsis","Infinity","jQuery"],"sources":["/home/daniele/.rbenv/versions/3.0.2/lib/ruby/gems/3.0.0/gems/decidim-decidim_awesome-0.10.2/app/packs/src/vendor/jquery.truncate.js"],"sourcesContent":["// From https://github.com/pathable/truncate/\n\n(function($) {\n\n  // Matches trailing non-space characters.\n  var chop = /(\\s*\\S+|\\s)$/;\n\n  // Matches the first word in the string.\n  var start = /^(\\S*)/;\n\n  // Return a truncated html string.  Delegates to $.fn.truncate.\n  $.truncate = function(html, options) {\n    return $('<div></div>').append(html).truncate(options).html();\n  };\n\n  // Truncate the contents of an element in place.\n  $.fn.truncate = function(options) {\n    if ($.isNumeric(options)) options = { length: options };\n    var o = $.extend({}, $.truncate.defaults, options);\n\n    return this.each(function() {\n      var self = $(this);\n\n      if (o.noBreaks) self.find('br').replaceWith(' ');\n\n      var text = self.text();\n      var excess = text.length - o.length;\n\n      if (o.stripTags) self.text(text);\n\n      // Chop off any partial words if appropriate.\n      if (o.words && excess > 0) {\n        var truncated = text.slice(0, o.length).replace(chop, '').length;\n\n        if (o.keepFirstWord && truncated === 0) {\n          excess = text.length - start.exec(text)[0].length - 1;\n        } else {\n          excess = text.length - truncated - 1;\n        }\n      }\n\n      if (excess < 0 || !excess && !o.truncated) return;\n\n      // Iterate over each child node in reverse, removing excess text.\n      $.each(self.contents().get().reverse(), function(i, el) {\n        var $el = $(el);\n        var text = $el.text();\n        var length = text.length;\n\n        // If the text is longer than the excess, remove the node and continue.\n        if (length <= excess) {\n          o.truncated = true;\n          excess -= length;\n          $el.remove();\n          return;\n        }\n\n        // Remove the excess text and append the ellipsis.\n        if (el.nodeType === 3) {\n          // should we finish the block anyway?\n          if (o.finishBlock) {\n            $(el.splitText(length)).replaceWith(o.ellipsis);\n          } else {\n            $(el.splitText(length - excess - 1)).replaceWith(o.ellipsis);\n          }\n          return false;\n        }\n\n        // Recursively truncate child nodes.\n        $el.truncate($.extend(o, { length: length - excess }));\n        return false;\n      });\n    });\n  };\n\n  $.truncate.defaults = {\n\n    // Strip all html elements, leaving only plain text.\n    stripTags: false,\n\n    // Only truncate at word boundaries.\n    words: false,\n\n    // When 'words' is active, keeps the first word in the string\n    // even if it's longer than a target length.\n    keepFirstWord: false,\n\n    // Replace instances of <br> with a single space.\n    noBreaks: false,\n\n    // if true always truncate the content at the end of the block.\n    finishBlock: false,\n\n    // The maximum length of the truncated html.\n    length: Infinity,\n\n    // The character to use as the ellipsis.  The word joiner (U+2060) can be\n    // used to prevent a hanging ellipsis, but displays incorrectly in Chrome\n    // on Windows 7.\n    // http://code.google.com/p/chromium/issues/detail?id=68323\n    ellipsis: '\\u2026' // '\\u2060\\u2026'\n\n  };\n\n})(jQuery);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}