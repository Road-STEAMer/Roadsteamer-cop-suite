{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nimport { Plugin } from \"prosemirror-state\";\nimport CharacterCount from \"@tiptap/extension-character-count\";\n\n/**\n * Extends the character counter to prevent adding new paragraphs after the\n * character limit is reached. The original character counter allows that.\n *\n * See: https://github.com/ueberdosis/tiptap/issues/3721\n */\nexport default CharacterCount.extend({\n  addProseMirrorPlugins: function addProseMirrorPlugins() {\n    var _this$parent;\n    var limit = this.options.limit;\n    var plugins = (_this$parent = this.parent) === null || _this$parent === void 0 ? void 0 : _this$parent.call(this);\n    if (limit === 0 || limit === null || !limit) {\n      return plugins;\n    }\n    var storage = this.editor.storage;\n    return [].concat(_toConsumableArray(plugins), [new Plugin({\n      props: {\n        handleKeyDown: function handleKeyDown(view, event) {\n          if (event.key === \"Enter\") {\n            return storage.characterCount.characters() >= limit;\n          }\n          return false;\n        }\n      }\n    })]);\n  }\n});","map":{"version":3,"names":["Plugin","CharacterCount","extend","addProseMirrorPlugins","_this$parent","limit","options","plugins","parent","call","storage","editor","concat","_toConsumableArray","props","handleKeyDown","view","event","key","characterCount","characters"],"sources":["/home/daniele/decidim_idra-main/app/packs/src/decidim/editor/extensions/character_count/index.js"],"sourcesContent":["import { Plugin } from \"prosemirror-state\";\n\nimport CharacterCount from \"@tiptap/extension-character-count\";\n\n/**\n * Extends the character counter to prevent adding new paragraphs after the\n * character limit is reached. The original character counter allows that.\n *\n * See: https://github.com/ueberdosis/tiptap/issues/3721\n */\nexport default CharacterCount.extend({\n  addProseMirrorPlugins() {\n    const limit = this.options.limit;\n    const plugins = this.parent?.();\n    if (limit === 0 || limit === null || !limit) {\n      return plugins;\n    }\n\n    const  { storage } = this.editor;\n    return [\n      ...plugins,\n      new Plugin({\n        props: {\n          handleKeyDown(view, event) {\n            if (event.key === \"Enter\") {\n              return storage.characterCount.characters() >= limit;\n            }\n\n            return false;\n          }\n        }\n      })\n    ];\n  }\n});\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,MAAM,QAAQ,mBAAmB;AAE1C,OAAOC,cAAc,MAAM,mCAAmC;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA,eAAeA,cAAc,CAACC,MAAM,CAAC;EACnCC,qBAAqB,WAAAA,sBAAA,EAAG;IAAA,IAAAC,YAAA;IACtB,IAAMC,KAAK,GAAG,IAAI,CAACC,OAAO,CAACD,KAAK;IAChC,IAAME,OAAO,IAAAH,YAAA,GAAG,IAAI,CAACI,MAAM,cAAAJ,YAAA,uBAAXA,YAAA,CAAAK,IAAA,KAAI,CAAW;IAC/B,IAAIJ,KAAK,KAAK,CAAC,IAAIA,KAAK,KAAK,IAAI,IAAI,CAACA,KAAK,EAAE;MAC3C,OAAOE,OAAO;IAChB;IAEA,IAASG,OAAO,GAAK,IAAI,CAACC,MAAM,CAAvBD,OAAO;IAChB,UAAAE,MAAA,CAAAC,kBAAA,CACKN,OAAO,IACV,IAAIP,MAAM,CAAC;MACTc,KAAK,EAAE;QACLC,aAAa,WAAAA,cAACC,IAAI,EAAEC,KAAK,EAAE;UACzB,IAAIA,KAAK,CAACC,GAAG,KAAK,OAAO,EAAE;YACzB,OAAOR,OAAO,CAACS,cAAc,CAACC,UAAU,EAAE,IAAIf,KAAK;UACrD;UAEA,OAAO,KAAK;QACd;MACF;IACF,CAAC,CAAC;EAEN;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}