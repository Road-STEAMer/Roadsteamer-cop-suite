{"ast":null,"code":"var _excluded = [\"start\"];\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport { mergeAttributes } from \"@tiptap/core\";\nimport OrderedList from \"@tiptap/extension-ordered-list\";\nimport { Plugin } from \"prosemirror-state\";\nimport _transformPastedHTML from \"src/decidim/editor/utilities/paste_transform\";\nvar allowedListTypes = [\"a\", \"A\", \"i\", \"I\"];\nvar covertListStyleToType = function covertListStyleToType(style) {\n  switch (style) {\n    case \"lower-alpha\":\n    case \"lower-latin\":\n      return \"a\";\n    case \"upper-alpha\":\n    case \"upper-latin\":\n      return \"A\";\n    case \"lower-roman\":\n      return \"i\";\n    case \"upper-roman\":\n      return \"I\";\n    default:\n      return \"1\";\n  }\n};\n\n/**\n * This extension is customized in order to support the different styles of\n * ordered lists, such as the following.\n *\n * type \"a\":\n *   a) List item 1\n *   b) List item 2\n *   c) List item 3\n *\n * type \"A\":\n *   A) List item 1\n *   B) List item 2\n *   C) List item 3\n *\n * type \"i\":\n *   i) List item 1\n *   ii) List item 2\n *   iii) List item 3\n *\n * type \"I\":\n *   I) List item 1\n *   II) List item 2\n *   III) List item 3\n *\n * See: https://github.com/ueberdosis/tiptap/issues/3726\n */\nexport default OrderedList.extend({\n  addAttributes: function addAttributes() {\n    var _this$parent;\n    return _objectSpread(_objectSpread({}, (_this$parent = this.parent) === null || _this$parent === void 0 ? void 0 : _this$parent.call(this)), {}, {\n      type: {\n        \"default\": null,\n        parseHTML: function parseHTML(element) {\n          var type = element.getAttribute(\"type\");\n          if (allowedListTypes.includes(type)) {\n            return type;\n          }\n\n          // Google Docs\n          var listItem = element.querySelector(\"li\");\n          if (listItem) {\n            type = covertListStyleToType(listItem.style.listStyleType);\n            if (allowedListTypes.includes(type)) {\n              return type;\n            }\n          }\n\n          // Office 365\n          type = covertListStyleToType(element.style.listStyleType);\n          if (allowedListTypes.includes(type)) {\n            return type;\n          }\n          return null;\n        }\n      }\n    });\n  },\n  /**\n   * Overridden render method to add the `data-type` attribute for the typed\n   * ordered lists as a workaround to style these lists properly. The following\n   * issue with the CSS attribute selectors for the `type` attribute prevents\n   * styling them properly otherwise: https://stackoverflow.com/q/53099708.\n   *\n   * The issue cannot be solved without this until the case sensitivity selector\n   * is implemented by browsers and widely available:\n   * https://caniuse.com/mdn-css_selectors_attribute_case_sensitive_modifier\n   *\n   * This has been already agreed by the CSS working group as per:\n   * https://github.com/w3c/csswg-drafts/commit/de57526\n   *\n   * For further details, see:\n   * https://github.com/tailwindlabs/tailwindcss-typography/issues/296\n   *\n   * @param {Object} attributes The attributes object containing the\n   *   `HTMLAttributes` key for the attributes to be rendered\n   * @returns {Array} The node definition array as defined by TipTap\n   */\n  renderHTML: function renderHTML(_ref) {\n    var HTMLAttributes = _ref.HTMLAttributes;\n    var start = HTMLAttributes.start,\n      attributesWithoutStart = _objectWithoutProperties(HTMLAttributes, _excluded);\n    var attrs = null;\n    if (start === 1) {\n      attrs = mergeAttributes(this.options.HTMLAttributes, attributesWithoutStart);\n    } else {\n      attrs = mergeAttributes(this.options.HTMLAttributes, HTMLAttributes);\n    }\n    if (attrs.type) {\n      var _attrs, _dataType, _attrs$_dataType;\n      (_attrs$_dataType = (_attrs = attrs)[_dataType = \"data-type\"]) !== null && _attrs$_dataType !== void 0 ? _attrs$_dataType : _attrs[_dataType] = attrs.type;\n    }\n    return [\"ol\", attrs, 0];\n  },\n  addCommands: function addCommands() {\n    var _this$parent2,\n      _this = this;\n    return _objectSpread(_objectSpread({}, (_this$parent2 = this.parent) === null || _this$parent2 === void 0 ? void 0 : _this$parent2.call(this)), {}, {\n      setOrderedListType: function setOrderedListType(type) {\n        return function (_ref2) {\n          var commands = _ref2.commands,\n            dispatch = _ref2.dispatch;\n          var listActive = _this.editor.isActive(\"orderedList\");\n          if (dispatch && listActive) {\n            return commands.updateAttributes(\"orderedList\", {\n              type: type\n            });\n          }\n          return listActive;\n        };\n      }\n    });\n  },\n  addKeyboardShortcuts: function addKeyboardShortcuts() {\n    var _this2 = this,\n      _this$parent3;\n    var currentType = function currentType() {\n      return _this2.editor.getAttributes(\"orderedList\").type;\n    };\n    var determineType = function determineType(type, direction) {\n      var idx = allowedListTypes.indexOf(type) + direction;\n      if (idx === -2) {\n        idx = allowedListTypes.length - 1;\n      } else if (idx < 0 || idx >= allowedListTypes.length) {\n        return null;\n      }\n      return allowedListTypes[idx];\n    };\n    var listTypeChange = function listTypeChange(direction) {\n      if (!_this2.editor.isActive(\"orderedList\")) {\n        return false;\n      }\n      var type = determineType(currentType(), direction);\n      if (!_this2.editor.can().setOrderedListType(type)) {\n        return false;\n      }\n      return _this2.editor.commands.setOrderedListType(type);\n    };\n    return _objectSpread(_objectSpread({}, (_this$parent3 = this.parent) === null || _this$parent3 === void 0 ? void 0 : _this$parent3.call(this)), {}, {\n      \"Alt-Shift-ArrowUp\": function AltShiftArrowUp() {\n        return listTypeChange(-1);\n      },\n      \"Alt-Shift-ArrowDown\": function AltShiftArrowDown() {\n        return listTypeChange(1);\n      }\n    });\n  },\n  /**\n   * Adds a plugin that modifies the pasted HTML before it is passed to the\n   * editor to fix some problems in the pasted content structure from different\n   * online and desktop editors.\n   *\n   * See: https://github.com/ueberdosis/tiptap/issues/3751\n   *\n   * @returns {Array} The ProseMirror plugins provided by this extension\n   */\n  addProseMirrorPlugins: function addProseMirrorPlugins() {\n    return [new Plugin({\n      props: {\n        transformPastedHTML: function transformPastedHTML(html) {\n          return _transformPastedHTML(html);\n        }\n      }\n    })];\n  }\n});","map":{"version":3,"names":["mergeAttributes","OrderedList","Plugin","_transformPastedHTML","allowedListTypes","covertListStyleToType","style","extend","addAttributes","_this$parent","_objectSpread","parent","call","type","parseHTML","element","getAttribute","includes","listItem","querySelector","listStyleType","renderHTML","_ref","HTMLAttributes","start","attributesWithoutStart","_objectWithoutProperties","_excluded","attrs","options","_attrs","_dataType","_attrs$_dataType","addCommands","_this$parent2","_this","setOrderedListType","_ref2","commands","dispatch","listActive","editor","isActive","updateAttributes","addKeyboardShortcuts","_this2","_this$parent3","currentType","getAttributes","determineType","direction","idx","indexOf","length","listTypeChange","can","AltShiftArrowUp","AltShiftArrowDown","addProseMirrorPlugins","props","transformPastedHTML","html"],"sources":["/home/daniele/decidim_idra-main/app/packs/src/decidim/editor/extensions/ordered_list/index.js"],"sourcesContent":["import { mergeAttributes } from \"@tiptap/core\";\nimport OrderedList from \"@tiptap/extension-ordered-list\";\nimport { Plugin } from \"prosemirror-state\";\n\nimport transformPastedHTML from \"src/decidim/editor/utilities/paste_transform\";\n\nconst allowedListTypes = [\"a\", \"A\", \"i\", \"I\"];\n\nconst covertListStyleToType = (style) => {\n  switch (style) {\n  case \"lower-alpha\":\n  case \"lower-latin\":\n    return \"a\";\n  case \"upper-alpha\":\n  case \"upper-latin\":\n    return \"A\";\n  case \"lower-roman\":\n    return \"i\";\n  case \"upper-roman\":\n    return \"I\";\n  default:\n    return \"1\";\n  }\n};\n\n/**\n * This extension is customized in order to support the different styles of\n * ordered lists, such as the following.\n *\n * type \"a\":\n *   a) List item 1\n *   b) List item 2\n *   c) List item 3\n *\n * type \"A\":\n *   A) List item 1\n *   B) List item 2\n *   C) List item 3\n *\n * type \"i\":\n *   i) List item 1\n *   ii) List item 2\n *   iii) List item 3\n *\n * type \"I\":\n *   I) List item 1\n *   II) List item 2\n *   III) List item 3\n *\n * See: https://github.com/ueberdosis/tiptap/issues/3726\n */\nexport default OrderedList.extend({\n  addAttributes() {\n    return {\n      ...this.parent?.(),\n      type: {\n        default: null,\n        parseHTML: (element) => {\n          let type = element.getAttribute(\"type\");\n          if (allowedListTypes.includes(type)) {\n            return type;\n          }\n\n          // Google Docs\n          const listItem = element.querySelector(\"li\");\n          if (listItem) {\n            type = covertListStyleToType(listItem.style.listStyleType);\n            if (allowedListTypes.includes(type)) {\n              return type;\n            }\n          }\n\n          // Office 365\n          type = covertListStyleToType(element.style.listStyleType);\n          if (allowedListTypes.includes(type)) {\n            return type;\n          }\n\n          return null;\n        }\n      }\n    };\n  },\n\n  /**\n   * Overridden render method to add the `data-type` attribute for the typed\n   * ordered lists as a workaround to style these lists properly. The following\n   * issue with the CSS attribute selectors for the `type` attribute prevents\n   * styling them properly otherwise: https://stackoverflow.com/q/53099708.\n   *\n   * The issue cannot be solved without this until the case sensitivity selector\n   * is implemented by browsers and widely available:\n   * https://caniuse.com/mdn-css_selectors_attribute_case_sensitive_modifier\n   *\n   * This has been already agreed by the CSS working group as per:\n   * https://github.com/w3c/csswg-drafts/commit/de57526\n   *\n   * For further details, see:\n   * https://github.com/tailwindlabs/tailwindcss-typography/issues/296\n   *\n   * @param {Object} attributes The attributes object containing the\n   *   `HTMLAttributes` key for the attributes to be rendered\n   * @returns {Array} The node definition array as defined by TipTap\n   */\n  renderHTML({ HTMLAttributes }) {\n    const { start, ...attributesWithoutStart } = HTMLAttributes\n\n    let attrs = null;\n    if (start === 1) {\n      attrs = mergeAttributes(this.options.HTMLAttributes, attributesWithoutStart);\n    } else {\n      attrs = mergeAttributes(this.options.HTMLAttributes, HTMLAttributes);\n    }\n\n    if (attrs.type) {\n      attrs[\"data-type\"] ??= attrs.type;\n    }\n\n    return [\"ol\", attrs, 0]\n  },\n\n  addCommands() {\n    return {\n      ...this.parent?.(),\n      setOrderedListType: (type) => ({ commands, dispatch }) => {\n        const listActive = this.editor.isActive(\"orderedList\");\n        if (dispatch && listActive) {\n          return commands.updateAttributes(\"orderedList\", { type });\n        }\n        return listActive;\n      }\n    };\n  },\n\n  addKeyboardShortcuts() {\n    const currentType = () => {\n      return this.editor.getAttributes(\"orderedList\").type;\n    };\n    const determineType = (type, direction) => {\n      let idx = allowedListTypes.indexOf(type) + direction;\n      if (idx === -2) {\n        idx = allowedListTypes.length - 1;\n      } else if (idx < 0 || idx >= allowedListTypes.length) {\n        return null;\n      }\n      return allowedListTypes[idx];\n    };\n    const listTypeChange = (direction) => {\n      if (!this.editor.isActive(\"orderedList\")) {\n        return false;\n      }\n\n      const type = determineType(currentType(), direction);\n      if (!this.editor.can().setOrderedListType(type)) {\n        return false;\n      }\n\n      return this.editor.commands.setOrderedListType(type);\n    }\n\n    return {\n      ...this.parent?.(),\n      \"Alt-Shift-ArrowUp\": () => listTypeChange(-1),\n      \"Alt-Shift-ArrowDown\": () => listTypeChange(1)\n    }\n  },\n\n  /**\n   * Adds a plugin that modifies the pasted HTML before it is passed to the\n   * editor to fix some problems in the pasted content structure from different\n   * online and desktop editors.\n   *\n   * See: https://github.com/ueberdosis/tiptap/issues/3751\n   *\n   * @returns {Array} The ProseMirror plugins provided by this extension\n   */\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        props: {\n          transformPastedHTML(html) {\n            return transformPastedHTML(html);\n          }\n        }\n      })\n    ];\n  }\n});\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,eAAe,QAAQ,cAAc;AAC9C,OAAOC,WAAW,MAAM,gCAAgC;AACxD,SAASC,MAAM,QAAQ,mBAAmB;AAE1C,OAAOC,oBAAmB,MAAM,8CAA8C;AAE9E,IAAMC,gBAAgB,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;AAE7C,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAIC,KAAK,EAAK;EACvC,QAAQA,KAAK;IACb,KAAK,aAAa;IAClB,KAAK,aAAa;MAChB,OAAO,GAAG;IACZ,KAAK,aAAa;IAClB,KAAK,aAAa;MAChB,OAAO,GAAG;IACZ,KAAK,aAAa;MAChB,OAAO,GAAG;IACZ,KAAK,aAAa;MAChB,OAAO,GAAG;IACZ;MACE,OAAO,GAAG;EAAA;AAEd,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeL,WAAW,CAACM,MAAM,CAAC;EAChCC,aAAa,WAAAA,cAAA,EAAG;IAAA,IAAAC,YAAA;IACd,OAAAC,aAAA,CAAAA,aAAA,MAAAD,YAAA,GACK,IAAI,CAACE,MAAM,cAAAF,YAAA,uBAAXA,YAAA,CAAAG,IAAA,KAAI,CAAW;MAClBC,IAAI,EAAE;QACJ,WAAS,IAAI;QACbC,SAAS,EAAE,SAAAA,UAACC,OAAO,EAAK;UACtB,IAAIF,IAAI,GAAGE,OAAO,CAACC,YAAY,CAAC,MAAM,CAAC;UACvC,IAAIZ,gBAAgB,CAACa,QAAQ,CAACJ,IAAI,CAAC,EAAE;YACnC,OAAOA,IAAI;UACb;;UAEA;UACA,IAAMK,QAAQ,GAAGH,OAAO,CAACI,aAAa,CAAC,IAAI,CAAC;UAC5C,IAAID,QAAQ,EAAE;YACZL,IAAI,GAAGR,qBAAqB,CAACa,QAAQ,CAACZ,KAAK,CAACc,aAAa,CAAC;YAC1D,IAAIhB,gBAAgB,CAACa,QAAQ,CAACJ,IAAI,CAAC,EAAE;cACnC,OAAOA,IAAI;YACb;UACF;;UAEA;UACAA,IAAI,GAAGR,qBAAqB,CAACU,OAAO,CAACT,KAAK,CAACc,aAAa,CAAC;UACzD,IAAIhB,gBAAgB,CAACa,QAAQ,CAACJ,IAAI,CAAC,EAAE;YACnC,OAAOA,IAAI;UACb;UAEA,OAAO,IAAI;QACb;MACF;IAAC;EAEL,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEQ,UAAU,WAAAA,WAAAC,IAAA,EAAqB;IAAA,IAAlBC,cAAc,GAAAD,IAAA,CAAdC,cAAc;IACzB,IAAQC,KAAK,GAAgCD,cAAc,CAAnDC,KAAK;MAAKC,sBAAsB,GAAAC,wBAAA,CAAKH,cAAc,EAAAI,SAAA;IAE3D,IAAIC,KAAK,GAAG,IAAI;IAChB,IAAIJ,KAAK,KAAK,CAAC,EAAE;MACfI,KAAK,GAAG5B,eAAe,CAAC,IAAI,CAAC6B,OAAO,CAACN,cAAc,EAAEE,sBAAsB,CAAC;IAC9E,CAAC,MAAM;MACLG,KAAK,GAAG5B,eAAe,CAAC,IAAI,CAAC6B,OAAO,CAACN,cAAc,EAAEA,cAAc,CAAC;IACtE;IAEA,IAAIK,KAAK,CAACf,IAAI,EAAE;MAAA,IAAAiB,MAAA,EAAAC,SAAA,EAAAC,gBAAA;MACd,CAAAA,gBAAA,IAAAF,MAAA,GAAAF,KAAK,EAAAG,SAAA,GAAC,WAAW,CAAC,cAAAC,gBAAA,cAAAA,gBAAA,GAAlBF,MAAA,CAAAC,SAAA,CAAkB,GAAKH,KAAK,CAACf,IAAI;IACnC;IAEA,OAAO,CAAC,IAAI,EAAEe,KAAK,EAAE,CAAC,CAAC;EACzB,CAAC;EAEDK,WAAW,WAAAA,YAAA,EAAG;IAAA,IAAAC,aAAA;MAAAC,KAAA;IACZ,OAAAzB,aAAA,CAAAA,aAAA,MAAAwB,aAAA,GACK,IAAI,CAACvB,MAAM,cAAAuB,aAAA,uBAAXA,aAAA,CAAAtB,IAAA,KAAI,CAAW;MAClBwB,kBAAkB,EAAE,SAAAA,mBAACvB,IAAI;QAAA,OAAK,UAAAwB,KAAA,EAA4B;UAAA,IAAzBC,QAAQ,GAAAD,KAAA,CAARC,QAAQ;YAAEC,QAAQ,GAAAF,KAAA,CAARE,QAAQ;UACjD,IAAMC,UAAU,GAAGL,KAAI,CAACM,MAAM,CAACC,QAAQ,CAAC,aAAa,CAAC;UACtD,IAAIH,QAAQ,IAAIC,UAAU,EAAE;YAC1B,OAAOF,QAAQ,CAACK,gBAAgB,CAAC,aAAa,EAAE;cAAE9B,IAAI,EAAJA;YAAK,CAAC,CAAC;UAC3D;UACA,OAAO2B,UAAU;QACnB,CAAC;MAAA;IAAA;EAEL,CAAC;EAEDI,oBAAoB,WAAAA,qBAAA,EAAG;IAAA,IAAAC,MAAA;MAAAC,aAAA;IACrB,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;MACxB,OAAOF,MAAI,CAACJ,MAAM,CAACO,aAAa,CAAC,aAAa,CAAC,CAACnC,IAAI;IACtD,CAAC;IACD,IAAMoC,aAAa,GAAG,SAAhBA,aAAaA,CAAIpC,IAAI,EAAEqC,SAAS,EAAK;MACzC,IAAIC,GAAG,GAAG/C,gBAAgB,CAACgD,OAAO,CAACvC,IAAI,CAAC,GAAGqC,SAAS;MACpD,IAAIC,GAAG,KAAK,CAAC,CAAC,EAAE;QACdA,GAAG,GAAG/C,gBAAgB,CAACiD,MAAM,GAAG,CAAC;MACnC,CAAC,MAAM,IAAIF,GAAG,GAAG,CAAC,IAAIA,GAAG,IAAI/C,gBAAgB,CAACiD,MAAM,EAAE;QACpD,OAAO,IAAI;MACb;MACA,OAAOjD,gBAAgB,CAAC+C,GAAG,CAAC;IAC9B,CAAC;IACD,IAAMG,cAAc,GAAG,SAAjBA,cAAcA,CAAIJ,SAAS,EAAK;MACpC,IAAI,CAACL,MAAI,CAACJ,MAAM,CAACC,QAAQ,CAAC,aAAa,CAAC,EAAE;QACxC,OAAO,KAAK;MACd;MAEA,IAAM7B,IAAI,GAAGoC,aAAa,CAACF,WAAW,EAAE,EAAEG,SAAS,CAAC;MACpD,IAAI,CAACL,MAAI,CAACJ,MAAM,CAACc,GAAG,EAAE,CAACnB,kBAAkB,CAACvB,IAAI,CAAC,EAAE;QAC/C,OAAO,KAAK;MACd;MAEA,OAAOgC,MAAI,CAACJ,MAAM,CAACH,QAAQ,CAACF,kBAAkB,CAACvB,IAAI,CAAC;IACtD,CAAC;IAED,OAAAH,aAAA,CAAAA,aAAA,MAAAoC,aAAA,GACK,IAAI,CAACnC,MAAM,cAAAmC,aAAA,uBAAXA,aAAA,CAAAlC,IAAA,KAAI,CAAW;MAClB,mBAAmB,EAAE,SAAA4C,gBAAA;QAAA,OAAMF,cAAc,CAAC,CAAC,CAAC,CAAC;MAAA;MAC7C,qBAAqB,EAAE,SAAAG,kBAAA;QAAA,OAAMH,cAAc,CAAC,CAAC,CAAC;MAAA;IAAA;EAElD,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEI,qBAAqB,WAAAA,sBAAA,EAAG;IACtB,OAAO,CACL,IAAIxD,MAAM,CAAC;MACTyD,KAAK,EAAE;QACLC,mBAAmB,WAAAA,oBAACC,IAAI,EAAE;UACxB,OAAO1D,oBAAmB,CAAC0D,IAAI,CAAC;QAClC;MACF;IACF,CAAC,CAAC,CACH;EACH;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}